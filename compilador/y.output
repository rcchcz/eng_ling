Terminals unused in grammar

    LEN_STRING
    COMMENT
    SEPARATOR
    ARRAY
    STRUCT
    TUPLE
    OPEN
    CLOSE


Grammar

    0 $accept: prog $end

    1 prog: stmlist

    2 stmlist: stm SEMICOLON
    3        | stm SEMICOLON stmlist

    4 stm: TYPE ids
    5    | TYPE ID ASSIGN expr
    6    | ID ASSIGN expr
    7    | expr
    8    | ID COPY_STRING expr
    9    | DEF ID PARENTHESES_INITIATOR paramlist PARENTHESES_TERMINATOR BRACES_INITIATOR stmlist BRACES_TERMINATOR
   10    | WHILE expr BRACES_INITIATOR stmlist BRACES_TERMINATOR
   11    | FOR PARENTHESES_INITIATOR TYPE ID ITERATOR BRACKETS_INITIATOR VALUE COMMA VALUE BRACKETS_TERMINATOR BRACES_INITIATOR stmlist BRACES_TERMINATOR
   12    | FOR PARENTHESES_INITIATOR TYPE ID ITERATOR ID BRACES_INITIATOR stmlist BRACES_TERMINATOR
   13    | IF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR
   14    | IF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR ELIF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR
   15    | IF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR ELIF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR ELSE BRACES_INITIATOR stmlist BRACES_TERMINATOR
   16    | IF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR ELSE stm
   17    | BREAK
   18    | RETURN expr
   19    | IN PARENTHESES_INITIATOR ID PARENTHESES_TERMINATOR
   20    | OUT expr

   21 ids: ID
   22    | ID COMMA ids

   23 paramlist: ε
   24          | paramlist COMMA param

   25 param: TYPE ID

   26 expr: val
   27     | expr PLUS_OPERATOR expr
   28     | expr MINUS_OPERATOR expr
   29     | expr MULTI_OPERATOR expr
   30     | expr DIVISION_OPERATOR expr
   31     | expr MOD_OPERATOR expr
   32     | expr POWER_OPERATOR expr
   33     | expr CONCAT expr
   34     | expr EQUAL expr
   35     | expr NOT_EQUAL expr
   36     | expr LEQ expr
   37     | expr GEQ expr
   38     | expr LESS_THAN expr
   39     | expr GREATER_THAN expr
   40     | NOT expr
   41     | expr AND expr
   42     | expr OR expr
   43     | PARENTHESES_INITIATOR expr PARENTHESES_TERMINATOR

   44 val: ID
   45    | VALUE


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    ID <sValue> (258) 5 6 8 9 11 12 19 21 22 25 44
    TYPE <sValue> (259) 4 5 11 12 25
    VALUE <sValue> (260) 11 45
    LEN_STRING <sValue> (261)
    ASSIGN (262) 5 6
    COMMENT (263)
    COMMA (264) 11 22 24
    SEMICOLON (265) 2 3
    SEPARATOR (266)
    DEF (267) 9
    ARRAY (268)
    STRUCT (269)
    TUPLE (270)
    WHILE (271) 10
    FOR (272) 11 12
    ITERATOR (273) 11 12
    IF (274) 13 14 15 16
    ELSE (275) 15 16
    ELIF (276) 14 15
    BREAK (277) 17
    RETURN (278) 18
    BRACES_INITIATOR (279) 9 10 11 12 13 14 15 16
    BRACES_TERMINATOR (280) 9 10 11 12 13 14 15 16
    BRACKETS_INITIATOR (281) 11
    BRACKETS_TERMINATOR (282) 11
    PARENTHESES_INITIATOR (283) 9 11 12 19 43
    PARENTHESES_TERMINATOR (284) 9 19 43
    IN (285) 19
    OUT (286) 20
    OPEN (287)
    CLOSE (288)
    EQUAL (289) 34
    NOT_EQUAL (290) 35
    LEQ (291) 36
    GEQ (292) 37
    GREATER_THAN (293) 39
    LESS_THAN (294) 38
    NOT (295) 40
    AND (296) 41
    OR (297) 42
    PLUS_OPERATOR (298) 27
    MINUS_OPERATOR (299) 28
    MULTI_OPERATOR (300) 29
    DIVISION_OPERATOR (301) 30
    MOD_OPERATOR (302) 31
    POWER_OPERATOR (303) 32
    CONCAT (304) 33
    COPY_STRING (305) 8


Nonterminals, with rules where they appear

    $accept (51)
        on left: 0
    prog <sValue> (52)
        on left: 1
        on right: 0
    stmlist <sValue> (53)
        on left: 2 3
        on right: 1 3 9 10 11 12 13 14 15 16
    stm <sValue> (54)
        on left: 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
        on right: 2 3 16
    ids (55)
        on left: 21 22
        on right: 4 22
    paramlist (56)
        on left: 23 24
        on right: 9 24
    param (57)
        on left: 25
        on right: 24
    expr (58)
        on left: 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43
        on right: 5 6 7 8 10 13 14 15 16 18 20 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43
    val (59)
        on left: 44 45
        on right: 26


State 0

    0 $accept: • prog $end

    ID                     shift, and go to state 1
    TYPE                   shift, and go to state 2
    VALUE                  shift, and go to state 3
    DEF                    shift, and go to state 4
    WHILE                  shift, and go to state 5
    FOR                    shift, and go to state 6
    IF                     shift, and go to state 7
    BREAK                  shift, and go to state 8
    RETURN                 shift, and go to state 9
    PARENTHESES_INITIATOR  shift, and go to state 10
    IN                     shift, and go to state 11
    OUT                    shift, and go to state 12
    NOT                    shift, and go to state 13

    prog     go to state 14
    stmlist  go to state 15
    stm      go to state 16
    expr     go to state 17
    val      go to state 18


State 1

    6 stm: ID • ASSIGN expr
    8    | ID • COPY_STRING expr
   44 val: ID •

    ASSIGN       shift, and go to state 19
    COPY_STRING  shift, and go to state 20

    $default  reduce using rule 44 (val)


State 2

    4 stm: TYPE • ids
    5    | TYPE • ID ASSIGN expr

    ID  shift, and go to state 21

    ids  go to state 22


State 3

   45 val: VALUE •

    $default  reduce using rule 45 (val)


State 4

    9 stm: DEF • ID PARENTHESES_INITIATOR paramlist PARENTHESES_TERMINATOR BRACES_INITIATOR stmlist BRACES_TERMINATOR

    ID  shift, and go to state 23


State 5

   10 stm: WHILE • expr BRACES_INITIATOR stmlist BRACES_TERMINATOR

    ID                     shift, and go to state 24
    VALUE                  shift, and go to state 3
    PARENTHESES_INITIATOR  shift, and go to state 10
    NOT                    shift, and go to state 13

    expr  go to state 25
    val   go to state 18


State 6

   11 stm: FOR • PARENTHESES_INITIATOR TYPE ID ITERATOR BRACKETS_INITIATOR VALUE COMMA VALUE BRACKETS_TERMINATOR BRACES_INITIATOR stmlist BRACES_TERMINATOR
   12    | FOR • PARENTHESES_INITIATOR TYPE ID ITERATOR ID BRACES_INITIATOR stmlist BRACES_TERMINATOR

    PARENTHESES_INITIATOR  shift, and go to state 26


State 7

   13 stm: IF • expr BRACES_INITIATOR stmlist BRACES_TERMINATOR
   14    | IF • expr BRACES_INITIATOR stmlist BRACES_TERMINATOR ELIF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR
   15    | IF • expr BRACES_INITIATOR stmlist BRACES_TERMINATOR ELIF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR ELSE BRACES_INITIATOR stmlist BRACES_TERMINATOR
   16    | IF • expr BRACES_INITIATOR stmlist BRACES_TERMINATOR ELSE stm

    ID                     shift, and go to state 24
    VALUE                  shift, and go to state 3
    PARENTHESES_INITIATOR  shift, and go to state 10
    NOT                    shift, and go to state 13

    expr  go to state 27
    val   go to state 18


State 8

   17 stm: BREAK •

    $default  reduce using rule 17 (stm)


State 9

   18 stm: RETURN • expr

    ID                     shift, and go to state 24
    VALUE                  shift, and go to state 3
    PARENTHESES_INITIATOR  shift, and go to state 10
    NOT                    shift, and go to state 13

    expr  go to state 28
    val   go to state 18


State 10

   43 expr: PARENTHESES_INITIATOR • expr PARENTHESES_TERMINATOR

    ID                     shift, and go to state 24
    VALUE                  shift, and go to state 3
    PARENTHESES_INITIATOR  shift, and go to state 10
    NOT                    shift, and go to state 13

    expr  go to state 29
    val   go to state 18


State 11

   19 stm: IN • PARENTHESES_INITIATOR ID PARENTHESES_TERMINATOR

    PARENTHESES_INITIATOR  shift, and go to state 30


State 12

   20 stm: OUT • expr

    ID                     shift, and go to state 24
    VALUE                  shift, and go to state 3
    PARENTHESES_INITIATOR  shift, and go to state 10
    NOT                    shift, and go to state 13

    expr  go to state 31
    val   go to state 18


State 13

   40 expr: NOT • expr

    ID                     shift, and go to state 24
    VALUE                  shift, and go to state 3
    PARENTHESES_INITIATOR  shift, and go to state 10
    NOT                    shift, and go to state 13

    expr  go to state 32
    val   go to state 18


State 14

    0 $accept: prog • $end

    $end  shift, and go to state 33


State 15

    1 prog: stmlist •

    $default  reduce using rule 1 (prog)


State 16

    2 stmlist: stm • SEMICOLON
    3        | stm • SEMICOLON stmlist

    SEMICOLON  shift, and go to state 34


State 17

    7 stm: expr •
   27 expr: expr • PLUS_OPERATOR expr
   28     | expr • MINUS_OPERATOR expr
   29     | expr • MULTI_OPERATOR expr
   30     | expr • DIVISION_OPERATOR expr
   31     | expr • MOD_OPERATOR expr
   32     | expr • POWER_OPERATOR expr
   33     | expr • CONCAT expr
   34     | expr • EQUAL expr
   35     | expr • NOT_EQUAL expr
   36     | expr • LEQ expr
   37     | expr • GEQ expr
   38     | expr • LESS_THAN expr
   39     | expr • GREATER_THAN expr
   41     | expr • AND expr
   42     | expr • OR expr

    EQUAL              shift, and go to state 35
    NOT_EQUAL          shift, and go to state 36
    LEQ                shift, and go to state 37
    GEQ                shift, and go to state 38
    GREATER_THAN       shift, and go to state 39
    LESS_THAN          shift, and go to state 40
    AND                shift, and go to state 41
    OR                 shift, and go to state 42
    PLUS_OPERATOR      shift, and go to state 43
    MINUS_OPERATOR     shift, and go to state 44
    MULTI_OPERATOR     shift, and go to state 45
    DIVISION_OPERATOR  shift, and go to state 46
    MOD_OPERATOR       shift, and go to state 47
    POWER_OPERATOR     shift, and go to state 48
    CONCAT             shift, and go to state 49

    $default  reduce using rule 7 (stm)


State 18

   26 expr: val •

    $default  reduce using rule 26 (expr)


State 19

    6 stm: ID ASSIGN • expr

    ID                     shift, and go to state 24
    VALUE                  shift, and go to state 3
    PARENTHESES_INITIATOR  shift, and go to state 10
    NOT                    shift, and go to state 13

    expr  go to state 50
    val   go to state 18


State 20

    8 stm: ID COPY_STRING • expr

    ID                     shift, and go to state 24
    VALUE                  shift, and go to state 3
    PARENTHESES_INITIATOR  shift, and go to state 10
    NOT                    shift, and go to state 13

    expr  go to state 51
    val   go to state 18


State 21

    5 stm: TYPE ID • ASSIGN expr
   21 ids: ID •
   22    | ID • COMMA ids

    ASSIGN  shift, and go to state 52
    COMMA   shift, and go to state 53

    $default  reduce using rule 21 (ids)


State 22

    4 stm: TYPE ids •

    $default  reduce using rule 4 (stm)


State 23

    9 stm: DEF ID • PARENTHESES_INITIATOR paramlist PARENTHESES_TERMINATOR BRACES_INITIATOR stmlist BRACES_TERMINATOR

    PARENTHESES_INITIATOR  shift, and go to state 54


State 24

   44 val: ID •

    $default  reduce using rule 44 (val)


State 25

   10 stm: WHILE expr • BRACES_INITIATOR stmlist BRACES_TERMINATOR
   27 expr: expr • PLUS_OPERATOR expr
   28     | expr • MINUS_OPERATOR expr
   29     | expr • MULTI_OPERATOR expr
   30     | expr • DIVISION_OPERATOR expr
   31     | expr • MOD_OPERATOR expr
   32     | expr • POWER_OPERATOR expr
   33     | expr • CONCAT expr
   34     | expr • EQUAL expr
   35     | expr • NOT_EQUAL expr
   36     | expr • LEQ expr
   37     | expr • GEQ expr
   38     | expr • LESS_THAN expr
   39     | expr • GREATER_THAN expr
   41     | expr • AND expr
   42     | expr • OR expr

    BRACES_INITIATOR   shift, and go to state 55
    EQUAL              shift, and go to state 35
    NOT_EQUAL          shift, and go to state 36
    LEQ                shift, and go to state 37
    GEQ                shift, and go to state 38
    GREATER_THAN       shift, and go to state 39
    LESS_THAN          shift, and go to state 40
    AND                shift, and go to state 41
    OR                 shift, and go to state 42
    PLUS_OPERATOR      shift, and go to state 43
    MINUS_OPERATOR     shift, and go to state 44
    MULTI_OPERATOR     shift, and go to state 45
    DIVISION_OPERATOR  shift, and go to state 46
    MOD_OPERATOR       shift, and go to state 47
    POWER_OPERATOR     shift, and go to state 48
    CONCAT             shift, and go to state 49


State 26

   11 stm: FOR PARENTHESES_INITIATOR • TYPE ID ITERATOR BRACKETS_INITIATOR VALUE COMMA VALUE BRACKETS_TERMINATOR BRACES_INITIATOR stmlist BRACES_TERMINATOR
   12    | FOR PARENTHESES_INITIATOR • TYPE ID ITERATOR ID BRACES_INITIATOR stmlist BRACES_TERMINATOR

    TYPE  shift, and go to state 56


State 27

   13 stm: IF expr • BRACES_INITIATOR stmlist BRACES_TERMINATOR
   14    | IF expr • BRACES_INITIATOR stmlist BRACES_TERMINATOR ELIF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR
   15    | IF expr • BRACES_INITIATOR stmlist BRACES_TERMINATOR ELIF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR ELSE BRACES_INITIATOR stmlist BRACES_TERMINATOR
   16    | IF expr • BRACES_INITIATOR stmlist BRACES_TERMINATOR ELSE stm
   27 expr: expr • PLUS_OPERATOR expr
   28     | expr • MINUS_OPERATOR expr
   29     | expr • MULTI_OPERATOR expr
   30     | expr • DIVISION_OPERATOR expr
   31     | expr • MOD_OPERATOR expr
   32     | expr • POWER_OPERATOR expr
   33     | expr • CONCAT expr
   34     | expr • EQUAL expr
   35     | expr • NOT_EQUAL expr
   36     | expr • LEQ expr
   37     | expr • GEQ expr
   38     | expr • LESS_THAN expr
   39     | expr • GREATER_THAN expr
   41     | expr • AND expr
   42     | expr • OR expr

    BRACES_INITIATOR   shift, and go to state 57
    EQUAL              shift, and go to state 35
    NOT_EQUAL          shift, and go to state 36
    LEQ                shift, and go to state 37
    GEQ                shift, and go to state 38
    GREATER_THAN       shift, and go to state 39
    LESS_THAN          shift, and go to state 40
    AND                shift, and go to state 41
    OR                 shift, and go to state 42
    PLUS_OPERATOR      shift, and go to state 43
    MINUS_OPERATOR     shift, and go to state 44
    MULTI_OPERATOR     shift, and go to state 45
    DIVISION_OPERATOR  shift, and go to state 46
    MOD_OPERATOR       shift, and go to state 47
    POWER_OPERATOR     shift, and go to state 48
    CONCAT             shift, and go to state 49


State 28

   18 stm: RETURN expr •
   27 expr: expr • PLUS_OPERATOR expr
   28     | expr • MINUS_OPERATOR expr
   29     | expr • MULTI_OPERATOR expr
   30     | expr • DIVISION_OPERATOR expr
   31     | expr • MOD_OPERATOR expr
   32     | expr • POWER_OPERATOR expr
   33     | expr • CONCAT expr
   34     | expr • EQUAL expr
   35     | expr • NOT_EQUAL expr
   36     | expr • LEQ expr
   37     | expr • GEQ expr
   38     | expr • LESS_THAN expr
   39     | expr • GREATER_THAN expr
   41     | expr • AND expr
   42     | expr • OR expr

    EQUAL              shift, and go to state 35
    NOT_EQUAL          shift, and go to state 36
    LEQ                shift, and go to state 37
    GEQ                shift, and go to state 38
    GREATER_THAN       shift, and go to state 39
    LESS_THAN          shift, and go to state 40
    AND                shift, and go to state 41
    OR                 shift, and go to state 42
    PLUS_OPERATOR      shift, and go to state 43
    MINUS_OPERATOR     shift, and go to state 44
    MULTI_OPERATOR     shift, and go to state 45
    DIVISION_OPERATOR  shift, and go to state 46
    MOD_OPERATOR       shift, and go to state 47
    POWER_OPERATOR     shift, and go to state 48
    CONCAT             shift, and go to state 49

    $default  reduce using rule 18 (stm)


State 29

   27 expr: expr • PLUS_OPERATOR expr
   28     | expr • MINUS_OPERATOR expr
   29     | expr • MULTI_OPERATOR expr
   30     | expr • DIVISION_OPERATOR expr
   31     | expr • MOD_OPERATOR expr
   32     | expr • POWER_OPERATOR expr
   33     | expr • CONCAT expr
   34     | expr • EQUAL expr
   35     | expr • NOT_EQUAL expr
   36     | expr • LEQ expr
   37     | expr • GEQ expr
   38     | expr • LESS_THAN expr
   39     | expr • GREATER_THAN expr
   41     | expr • AND expr
   42     | expr • OR expr
   43     | PARENTHESES_INITIATOR expr • PARENTHESES_TERMINATOR

    PARENTHESES_TERMINATOR  shift, and go to state 58
    EQUAL                   shift, and go to state 35
    NOT_EQUAL               shift, and go to state 36
    LEQ                     shift, and go to state 37
    GEQ                     shift, and go to state 38
    GREATER_THAN            shift, and go to state 39
    LESS_THAN               shift, and go to state 40
    AND                     shift, and go to state 41
    OR                      shift, and go to state 42
    PLUS_OPERATOR           shift, and go to state 43
    MINUS_OPERATOR          shift, and go to state 44
    MULTI_OPERATOR          shift, and go to state 45
    DIVISION_OPERATOR       shift, and go to state 46
    MOD_OPERATOR            shift, and go to state 47
    POWER_OPERATOR          shift, and go to state 48
    CONCAT                  shift, and go to state 49


State 30

   19 stm: IN PARENTHESES_INITIATOR • ID PARENTHESES_TERMINATOR

    ID  shift, and go to state 59


State 31

   20 stm: OUT expr •
   27 expr: expr • PLUS_OPERATOR expr
   28     | expr • MINUS_OPERATOR expr
   29     | expr • MULTI_OPERATOR expr
   30     | expr • DIVISION_OPERATOR expr
   31     | expr • MOD_OPERATOR expr
   32     | expr • POWER_OPERATOR expr
   33     | expr • CONCAT expr
   34     | expr • EQUAL expr
   35     | expr • NOT_EQUAL expr
   36     | expr • LEQ expr
   37     | expr • GEQ expr
   38     | expr • LESS_THAN expr
   39     | expr • GREATER_THAN expr
   41     | expr • AND expr
   42     | expr • OR expr

    EQUAL              shift, and go to state 35
    NOT_EQUAL          shift, and go to state 36
    LEQ                shift, and go to state 37
    GEQ                shift, and go to state 38
    GREATER_THAN       shift, and go to state 39
    LESS_THAN          shift, and go to state 40
    AND                shift, and go to state 41
    OR                 shift, and go to state 42
    PLUS_OPERATOR      shift, and go to state 43
    MINUS_OPERATOR     shift, and go to state 44
    MULTI_OPERATOR     shift, and go to state 45
    DIVISION_OPERATOR  shift, and go to state 46
    MOD_OPERATOR       shift, and go to state 47
    POWER_OPERATOR     shift, and go to state 48
    CONCAT             shift, and go to state 49

    $default  reduce using rule 20 (stm)


State 32

   27 expr: expr • PLUS_OPERATOR expr
   28     | expr • MINUS_OPERATOR expr
   29     | expr • MULTI_OPERATOR expr
   30     | expr • DIVISION_OPERATOR expr
   31     | expr • MOD_OPERATOR expr
   32     | expr • POWER_OPERATOR expr
   33     | expr • CONCAT expr
   34     | expr • EQUAL expr
   35     | expr • NOT_EQUAL expr
   36     | expr • LEQ expr
   37     | expr • GEQ expr
   38     | expr • LESS_THAN expr
   39     | expr • GREATER_THAN expr
   40     | NOT expr •
   41     | expr • AND expr
   42     | expr • OR expr

    EQUAL              shift, and go to state 35
    NOT_EQUAL          shift, and go to state 36
    LEQ                shift, and go to state 37
    GEQ                shift, and go to state 38
    GREATER_THAN       shift, and go to state 39
    LESS_THAN          shift, and go to state 40
    PLUS_OPERATOR      shift, and go to state 43
    MINUS_OPERATOR     shift, and go to state 44
    MULTI_OPERATOR     shift, and go to state 45
    DIVISION_OPERATOR  shift, and go to state 46
    MOD_OPERATOR       shift, and go to state 47
    POWER_OPERATOR     shift, and go to state 48
    CONCAT             shift, and go to state 49

    $default  reduce using rule 40 (expr)


State 33

    0 $accept: prog $end •

    $default  accept


State 34

    2 stmlist: stm SEMICOLON •
    3        | stm SEMICOLON • stmlist

    ID                     shift, and go to state 1
    TYPE                   shift, and go to state 2
    VALUE                  shift, and go to state 3
    DEF                    shift, and go to state 4
    WHILE                  shift, and go to state 5
    FOR                    shift, and go to state 6
    IF                     shift, and go to state 7
    BREAK                  shift, and go to state 8
    RETURN                 shift, and go to state 9
    PARENTHESES_INITIATOR  shift, and go to state 10
    IN                     shift, and go to state 11
    OUT                    shift, and go to state 12
    NOT                    shift, and go to state 13

    $default  reduce using rule 2 (stmlist)

    stmlist  go to state 60
    stm      go to state 16
    expr     go to state 17
    val      go to state 18


State 35

   34 expr: expr EQUAL • expr

    ID                     shift, and go to state 24
    VALUE                  shift, and go to state 3
    PARENTHESES_INITIATOR  shift, and go to state 10
    NOT                    shift, and go to state 13

    expr  go to state 61
    val   go to state 18


State 36

   35 expr: expr NOT_EQUAL • expr

    ID                     shift, and go to state 24
    VALUE                  shift, and go to state 3
    PARENTHESES_INITIATOR  shift, and go to state 10
    NOT                    shift, and go to state 13

    expr  go to state 62
    val   go to state 18


State 37

   36 expr: expr LEQ • expr

    ID                     shift, and go to state 24
    VALUE                  shift, and go to state 3
    PARENTHESES_INITIATOR  shift, and go to state 10
    NOT                    shift, and go to state 13

    expr  go to state 63
    val   go to state 18


State 38

   37 expr: expr GEQ • expr

    ID                     shift, and go to state 24
    VALUE                  shift, and go to state 3
    PARENTHESES_INITIATOR  shift, and go to state 10
    NOT                    shift, and go to state 13

    expr  go to state 64
    val   go to state 18


State 39

   39 expr: expr GREATER_THAN • expr

    ID                     shift, and go to state 24
    VALUE                  shift, and go to state 3
    PARENTHESES_INITIATOR  shift, and go to state 10
    NOT                    shift, and go to state 13

    expr  go to state 65
    val   go to state 18


State 40

   38 expr: expr LESS_THAN • expr

    ID                     shift, and go to state 24
    VALUE                  shift, and go to state 3
    PARENTHESES_INITIATOR  shift, and go to state 10
    NOT                    shift, and go to state 13

    expr  go to state 66
    val   go to state 18


State 41

   41 expr: expr AND • expr

    ID                     shift, and go to state 24
    VALUE                  shift, and go to state 3
    PARENTHESES_INITIATOR  shift, and go to state 10
    NOT                    shift, and go to state 13

    expr  go to state 67
    val   go to state 18


State 42

   42 expr: expr OR • expr

    ID                     shift, and go to state 24
    VALUE                  shift, and go to state 3
    PARENTHESES_INITIATOR  shift, and go to state 10
    NOT                    shift, and go to state 13

    expr  go to state 68
    val   go to state 18


State 43

   27 expr: expr PLUS_OPERATOR • expr

    ID                     shift, and go to state 24
    VALUE                  shift, and go to state 3
    PARENTHESES_INITIATOR  shift, and go to state 10
    NOT                    shift, and go to state 13

    expr  go to state 69
    val   go to state 18


State 44

   28 expr: expr MINUS_OPERATOR • expr

    ID                     shift, and go to state 24
    VALUE                  shift, and go to state 3
    PARENTHESES_INITIATOR  shift, and go to state 10
    NOT                    shift, and go to state 13

    expr  go to state 70
    val   go to state 18


State 45

   29 expr: expr MULTI_OPERATOR • expr

    ID                     shift, and go to state 24
    VALUE                  shift, and go to state 3
    PARENTHESES_INITIATOR  shift, and go to state 10
    NOT                    shift, and go to state 13

    expr  go to state 71
    val   go to state 18


State 46

   30 expr: expr DIVISION_OPERATOR • expr

    ID                     shift, and go to state 24
    VALUE                  shift, and go to state 3
    PARENTHESES_INITIATOR  shift, and go to state 10
    NOT                    shift, and go to state 13

    expr  go to state 72
    val   go to state 18


State 47

   31 expr: expr MOD_OPERATOR • expr

    ID                     shift, and go to state 24
    VALUE                  shift, and go to state 3
    PARENTHESES_INITIATOR  shift, and go to state 10
    NOT                    shift, and go to state 13

    expr  go to state 73
    val   go to state 18


State 48

   32 expr: expr POWER_OPERATOR • expr

    ID                     shift, and go to state 24
    VALUE                  shift, and go to state 3
    PARENTHESES_INITIATOR  shift, and go to state 10
    NOT                    shift, and go to state 13

    expr  go to state 74
    val   go to state 18


State 49

   33 expr: expr CONCAT • expr

    ID                     shift, and go to state 24
    VALUE                  shift, and go to state 3
    PARENTHESES_INITIATOR  shift, and go to state 10
    NOT                    shift, and go to state 13

    expr  go to state 75
    val   go to state 18


State 50

    6 stm: ID ASSIGN expr •
   27 expr: expr • PLUS_OPERATOR expr
   28     | expr • MINUS_OPERATOR expr
   29     | expr • MULTI_OPERATOR expr
   30     | expr • DIVISION_OPERATOR expr
   31     | expr • MOD_OPERATOR expr
   32     | expr • POWER_OPERATOR expr
   33     | expr • CONCAT expr
   34     | expr • EQUAL expr
   35     | expr • NOT_EQUAL expr
   36     | expr • LEQ expr
   37     | expr • GEQ expr
   38     | expr • LESS_THAN expr
   39     | expr • GREATER_THAN expr
   41     | expr • AND expr
   42     | expr • OR expr

    EQUAL              shift, and go to state 35
    NOT_EQUAL          shift, and go to state 36
    LEQ                shift, and go to state 37
    GEQ                shift, and go to state 38
    GREATER_THAN       shift, and go to state 39
    LESS_THAN          shift, and go to state 40
    AND                shift, and go to state 41
    OR                 shift, and go to state 42
    PLUS_OPERATOR      shift, and go to state 43
    MINUS_OPERATOR     shift, and go to state 44
    MULTI_OPERATOR     shift, and go to state 45
    DIVISION_OPERATOR  shift, and go to state 46
    MOD_OPERATOR       shift, and go to state 47
    POWER_OPERATOR     shift, and go to state 48
    CONCAT             shift, and go to state 49

    $default  reduce using rule 6 (stm)


State 51

    8 stm: ID COPY_STRING expr •
   27 expr: expr • PLUS_OPERATOR expr
   28     | expr • MINUS_OPERATOR expr
   29     | expr • MULTI_OPERATOR expr
   30     | expr • DIVISION_OPERATOR expr
   31     | expr • MOD_OPERATOR expr
   32     | expr • POWER_OPERATOR expr
   33     | expr • CONCAT expr
   34     | expr • EQUAL expr
   35     | expr • NOT_EQUAL expr
   36     | expr • LEQ expr
   37     | expr • GEQ expr
   38     | expr • LESS_THAN expr
   39     | expr • GREATER_THAN expr
   41     | expr • AND expr
   42     | expr • OR expr

    EQUAL              shift, and go to state 35
    NOT_EQUAL          shift, and go to state 36
    LEQ                shift, and go to state 37
    GEQ                shift, and go to state 38
    GREATER_THAN       shift, and go to state 39
    LESS_THAN          shift, and go to state 40
    AND                shift, and go to state 41
    OR                 shift, and go to state 42
    PLUS_OPERATOR      shift, and go to state 43
    MINUS_OPERATOR     shift, and go to state 44
    MULTI_OPERATOR     shift, and go to state 45
    DIVISION_OPERATOR  shift, and go to state 46
    MOD_OPERATOR       shift, and go to state 47
    POWER_OPERATOR     shift, and go to state 48
    CONCAT             shift, and go to state 49

    $default  reduce using rule 8 (stm)


State 52

    5 stm: TYPE ID ASSIGN • expr

    ID                     shift, and go to state 24
    VALUE                  shift, and go to state 3
    PARENTHESES_INITIATOR  shift, and go to state 10
    NOT                    shift, and go to state 13

    expr  go to state 76
    val   go to state 18


State 53

   22 ids: ID COMMA • ids

    ID  shift, and go to state 77

    ids  go to state 78


State 54

    9 stm: DEF ID PARENTHESES_INITIATOR • paramlist PARENTHESES_TERMINATOR BRACES_INITIATOR stmlist BRACES_TERMINATOR

    $default  reduce using rule 23 (paramlist)

    paramlist  go to state 79


State 55

   10 stm: WHILE expr BRACES_INITIATOR • stmlist BRACES_TERMINATOR

    ID                     shift, and go to state 1
    TYPE                   shift, and go to state 2
    VALUE                  shift, and go to state 3
    DEF                    shift, and go to state 4
    WHILE                  shift, and go to state 5
    FOR                    shift, and go to state 6
    IF                     shift, and go to state 7
    BREAK                  shift, and go to state 8
    RETURN                 shift, and go to state 9
    PARENTHESES_INITIATOR  shift, and go to state 10
    IN                     shift, and go to state 11
    OUT                    shift, and go to state 12
    NOT                    shift, and go to state 13

    stmlist  go to state 80
    stm      go to state 16
    expr     go to state 17
    val      go to state 18


State 56

   11 stm: FOR PARENTHESES_INITIATOR TYPE • ID ITERATOR BRACKETS_INITIATOR VALUE COMMA VALUE BRACKETS_TERMINATOR BRACES_INITIATOR stmlist BRACES_TERMINATOR
   12    | FOR PARENTHESES_INITIATOR TYPE • ID ITERATOR ID BRACES_INITIATOR stmlist BRACES_TERMINATOR

    ID  shift, and go to state 81


State 57

   13 stm: IF expr BRACES_INITIATOR • stmlist BRACES_TERMINATOR
   14    | IF expr BRACES_INITIATOR • stmlist BRACES_TERMINATOR ELIF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR
   15    | IF expr BRACES_INITIATOR • stmlist BRACES_TERMINATOR ELIF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR ELSE BRACES_INITIATOR stmlist BRACES_TERMINATOR
   16    | IF expr BRACES_INITIATOR • stmlist BRACES_TERMINATOR ELSE stm

    ID                     shift, and go to state 1
    TYPE                   shift, and go to state 2
    VALUE                  shift, and go to state 3
    DEF                    shift, and go to state 4
    WHILE                  shift, and go to state 5
    FOR                    shift, and go to state 6
    IF                     shift, and go to state 7
    BREAK                  shift, and go to state 8
    RETURN                 shift, and go to state 9
    PARENTHESES_INITIATOR  shift, and go to state 10
    IN                     shift, and go to state 11
    OUT                    shift, and go to state 12
    NOT                    shift, and go to state 13

    stmlist  go to state 82
    stm      go to state 16
    expr     go to state 17
    val      go to state 18


State 58

   43 expr: PARENTHESES_INITIATOR expr PARENTHESES_TERMINATOR •

    $default  reduce using rule 43 (expr)


State 59

   19 stm: IN PARENTHESES_INITIATOR ID • PARENTHESES_TERMINATOR

    PARENTHESES_TERMINATOR  shift, and go to state 83


State 60

    3 stmlist: stm SEMICOLON stmlist •

    $default  reduce using rule 3 (stmlist)


State 61

   27 expr: expr • PLUS_OPERATOR expr
   28     | expr • MINUS_OPERATOR expr
   29     | expr • MULTI_OPERATOR expr
   30     | expr • DIVISION_OPERATOR expr
   31     | expr • MOD_OPERATOR expr
   32     | expr • POWER_OPERATOR expr
   33     | expr • CONCAT expr
   34     | expr • EQUAL expr
   34     | expr EQUAL expr •
   35     | expr • NOT_EQUAL expr
   36     | expr • LEQ expr
   37     | expr • GEQ expr
   38     | expr • LESS_THAN expr
   39     | expr • GREATER_THAN expr
   41     | expr • AND expr
   42     | expr • OR expr

    PLUS_OPERATOR      shift, and go to state 43
    MINUS_OPERATOR     shift, and go to state 44
    MULTI_OPERATOR     shift, and go to state 45
    DIVISION_OPERATOR  shift, and go to state 46
    MOD_OPERATOR       shift, and go to state 47
    POWER_OPERATOR     shift, and go to state 48
    CONCAT             shift, and go to state 49

    EQUAL         error (nonassociative)
    NOT_EQUAL     error (nonassociative)
    LEQ           error (nonassociative)
    GEQ           error (nonassociative)
    GREATER_THAN  error (nonassociative)
    LESS_THAN     error (nonassociative)

    $default  reduce using rule 34 (expr)


State 62

   27 expr: expr • PLUS_OPERATOR expr
   28     | expr • MINUS_OPERATOR expr
   29     | expr • MULTI_OPERATOR expr
   30     | expr • DIVISION_OPERATOR expr
   31     | expr • MOD_OPERATOR expr
   32     | expr • POWER_OPERATOR expr
   33     | expr • CONCAT expr
   34     | expr • EQUAL expr
   35     | expr • NOT_EQUAL expr
   35     | expr NOT_EQUAL expr •
   36     | expr • LEQ expr
   37     | expr • GEQ expr
   38     | expr • LESS_THAN expr
   39     | expr • GREATER_THAN expr
   41     | expr • AND expr
   42     | expr • OR expr

    PLUS_OPERATOR      shift, and go to state 43
    MINUS_OPERATOR     shift, and go to state 44
    MULTI_OPERATOR     shift, and go to state 45
    DIVISION_OPERATOR  shift, and go to state 46
    MOD_OPERATOR       shift, and go to state 47
    POWER_OPERATOR     shift, and go to state 48
    CONCAT             shift, and go to state 49

    EQUAL         error (nonassociative)
    NOT_EQUAL     error (nonassociative)
    LEQ           error (nonassociative)
    GEQ           error (nonassociative)
    GREATER_THAN  error (nonassociative)
    LESS_THAN     error (nonassociative)

    $default  reduce using rule 35 (expr)


State 63

   27 expr: expr • PLUS_OPERATOR expr
   28     | expr • MINUS_OPERATOR expr
   29     | expr • MULTI_OPERATOR expr
   30     | expr • DIVISION_OPERATOR expr
   31     | expr • MOD_OPERATOR expr
   32     | expr • POWER_OPERATOR expr
   33     | expr • CONCAT expr
   34     | expr • EQUAL expr
   35     | expr • NOT_EQUAL expr
   36     | expr • LEQ expr
   36     | expr LEQ expr •
   37     | expr • GEQ expr
   38     | expr • LESS_THAN expr
   39     | expr • GREATER_THAN expr
   41     | expr • AND expr
   42     | expr • OR expr

    PLUS_OPERATOR      shift, and go to state 43
    MINUS_OPERATOR     shift, and go to state 44
    MULTI_OPERATOR     shift, and go to state 45
    DIVISION_OPERATOR  shift, and go to state 46
    MOD_OPERATOR       shift, and go to state 47
    POWER_OPERATOR     shift, and go to state 48
    CONCAT             shift, and go to state 49

    EQUAL         error (nonassociative)
    NOT_EQUAL     error (nonassociative)
    LEQ           error (nonassociative)
    GEQ           error (nonassociative)
    GREATER_THAN  error (nonassociative)
    LESS_THAN     error (nonassociative)

    $default  reduce using rule 36 (expr)


State 64

   27 expr: expr • PLUS_OPERATOR expr
   28     | expr • MINUS_OPERATOR expr
   29     | expr • MULTI_OPERATOR expr
   30     | expr • DIVISION_OPERATOR expr
   31     | expr • MOD_OPERATOR expr
   32     | expr • POWER_OPERATOR expr
   33     | expr • CONCAT expr
   34     | expr • EQUAL expr
   35     | expr • NOT_EQUAL expr
   36     | expr • LEQ expr
   37     | expr • GEQ expr
   37     | expr GEQ expr •
   38     | expr • LESS_THAN expr
   39     | expr • GREATER_THAN expr
   41     | expr • AND expr
   42     | expr • OR expr

    PLUS_OPERATOR      shift, and go to state 43
    MINUS_OPERATOR     shift, and go to state 44
    MULTI_OPERATOR     shift, and go to state 45
    DIVISION_OPERATOR  shift, and go to state 46
    MOD_OPERATOR       shift, and go to state 47
    POWER_OPERATOR     shift, and go to state 48
    CONCAT             shift, and go to state 49

    EQUAL         error (nonassociative)
    NOT_EQUAL     error (nonassociative)
    LEQ           error (nonassociative)
    GEQ           error (nonassociative)
    GREATER_THAN  error (nonassociative)
    LESS_THAN     error (nonassociative)

    $default  reduce using rule 37 (expr)


State 65

   27 expr: expr • PLUS_OPERATOR expr
   28     | expr • MINUS_OPERATOR expr
   29     | expr • MULTI_OPERATOR expr
   30     | expr • DIVISION_OPERATOR expr
   31     | expr • MOD_OPERATOR expr
   32     | expr • POWER_OPERATOR expr
   33     | expr • CONCAT expr
   34     | expr • EQUAL expr
   35     | expr • NOT_EQUAL expr
   36     | expr • LEQ expr
   37     | expr • GEQ expr
   38     | expr • LESS_THAN expr
   39     | expr • GREATER_THAN expr
   39     | expr GREATER_THAN expr •
   41     | expr • AND expr
   42     | expr • OR expr

    PLUS_OPERATOR      shift, and go to state 43
    MINUS_OPERATOR     shift, and go to state 44
    MULTI_OPERATOR     shift, and go to state 45
    DIVISION_OPERATOR  shift, and go to state 46
    MOD_OPERATOR       shift, and go to state 47
    POWER_OPERATOR     shift, and go to state 48
    CONCAT             shift, and go to state 49

    EQUAL         error (nonassociative)
    NOT_EQUAL     error (nonassociative)
    LEQ           error (nonassociative)
    GEQ           error (nonassociative)
    GREATER_THAN  error (nonassociative)
    LESS_THAN     error (nonassociative)

    $default  reduce using rule 39 (expr)


State 66

   27 expr: expr • PLUS_OPERATOR expr
   28     | expr • MINUS_OPERATOR expr
   29     | expr • MULTI_OPERATOR expr
   30     | expr • DIVISION_OPERATOR expr
   31     | expr • MOD_OPERATOR expr
   32     | expr • POWER_OPERATOR expr
   33     | expr • CONCAT expr
   34     | expr • EQUAL expr
   35     | expr • NOT_EQUAL expr
   36     | expr • LEQ expr
   37     | expr • GEQ expr
   38     | expr • LESS_THAN expr
   38     | expr LESS_THAN expr •
   39     | expr • GREATER_THAN expr
   41     | expr • AND expr
   42     | expr • OR expr

    PLUS_OPERATOR      shift, and go to state 43
    MINUS_OPERATOR     shift, and go to state 44
    MULTI_OPERATOR     shift, and go to state 45
    DIVISION_OPERATOR  shift, and go to state 46
    MOD_OPERATOR       shift, and go to state 47
    POWER_OPERATOR     shift, and go to state 48
    CONCAT             shift, and go to state 49

    EQUAL         error (nonassociative)
    NOT_EQUAL     error (nonassociative)
    LEQ           error (nonassociative)
    GEQ           error (nonassociative)
    GREATER_THAN  error (nonassociative)
    LESS_THAN     error (nonassociative)

    $default  reduce using rule 38 (expr)


State 67

   27 expr: expr • PLUS_OPERATOR expr
   28     | expr • MINUS_OPERATOR expr
   29     | expr • MULTI_OPERATOR expr
   30     | expr • DIVISION_OPERATOR expr
   31     | expr • MOD_OPERATOR expr
   32     | expr • POWER_OPERATOR expr
   33     | expr • CONCAT expr
   34     | expr • EQUAL expr
   35     | expr • NOT_EQUAL expr
   36     | expr • LEQ expr
   37     | expr • GEQ expr
   38     | expr • LESS_THAN expr
   39     | expr • GREATER_THAN expr
   41     | expr • AND expr
   41     | expr AND expr •
   42     | expr • OR expr

    EQUAL              shift, and go to state 35
    NOT_EQUAL          shift, and go to state 36
    LEQ                shift, and go to state 37
    GEQ                shift, and go to state 38
    GREATER_THAN       shift, and go to state 39
    LESS_THAN          shift, and go to state 40
    PLUS_OPERATOR      shift, and go to state 43
    MINUS_OPERATOR     shift, and go to state 44
    MULTI_OPERATOR     shift, and go to state 45
    DIVISION_OPERATOR  shift, and go to state 46
    MOD_OPERATOR       shift, and go to state 47
    POWER_OPERATOR     shift, and go to state 48
    CONCAT             shift, and go to state 49

    $default  reduce using rule 41 (expr)


State 68

   27 expr: expr • PLUS_OPERATOR expr
   28     | expr • MINUS_OPERATOR expr
   29     | expr • MULTI_OPERATOR expr
   30     | expr • DIVISION_OPERATOR expr
   31     | expr • MOD_OPERATOR expr
   32     | expr • POWER_OPERATOR expr
   33     | expr • CONCAT expr
   34     | expr • EQUAL expr
   35     | expr • NOT_EQUAL expr
   36     | expr • LEQ expr
   37     | expr • GEQ expr
   38     | expr • LESS_THAN expr
   39     | expr • GREATER_THAN expr
   41     | expr • AND expr
   42     | expr • OR expr
   42     | expr OR expr •

    EQUAL              shift, and go to state 35
    NOT_EQUAL          shift, and go to state 36
    LEQ                shift, and go to state 37
    GEQ                shift, and go to state 38
    GREATER_THAN       shift, and go to state 39
    LESS_THAN          shift, and go to state 40
    AND                shift, and go to state 41
    PLUS_OPERATOR      shift, and go to state 43
    MINUS_OPERATOR     shift, and go to state 44
    MULTI_OPERATOR     shift, and go to state 45
    DIVISION_OPERATOR  shift, and go to state 46
    MOD_OPERATOR       shift, and go to state 47
    POWER_OPERATOR     shift, and go to state 48
    CONCAT             shift, and go to state 49

    $default  reduce using rule 42 (expr)


State 69

   27 expr: expr • PLUS_OPERATOR expr
   27     | expr PLUS_OPERATOR expr •
   28     | expr • MINUS_OPERATOR expr
   29     | expr • MULTI_OPERATOR expr
   30     | expr • DIVISION_OPERATOR expr
   31     | expr • MOD_OPERATOR expr
   32     | expr • POWER_OPERATOR expr
   33     | expr • CONCAT expr
   34     | expr • EQUAL expr
   35     | expr • NOT_EQUAL expr
   36     | expr • LEQ expr
   37     | expr • GEQ expr
   38     | expr • LESS_THAN expr
   39     | expr • GREATER_THAN expr
   41     | expr • AND expr
   42     | expr • OR expr

    MULTI_OPERATOR     shift, and go to state 45
    DIVISION_OPERATOR  shift, and go to state 46
    MOD_OPERATOR       shift, and go to state 47
    POWER_OPERATOR     shift, and go to state 48
    CONCAT             shift, and go to state 49

    $default  reduce using rule 27 (expr)


State 70

   27 expr: expr • PLUS_OPERATOR expr
   28     | expr • MINUS_OPERATOR expr
   28     | expr MINUS_OPERATOR expr •
   29     | expr • MULTI_OPERATOR expr
   30     | expr • DIVISION_OPERATOR expr
   31     | expr • MOD_OPERATOR expr
   32     | expr • POWER_OPERATOR expr
   33     | expr • CONCAT expr
   34     | expr • EQUAL expr
   35     | expr • NOT_EQUAL expr
   36     | expr • LEQ expr
   37     | expr • GEQ expr
   38     | expr • LESS_THAN expr
   39     | expr • GREATER_THAN expr
   41     | expr • AND expr
   42     | expr • OR expr

    MULTI_OPERATOR     shift, and go to state 45
    DIVISION_OPERATOR  shift, and go to state 46
    MOD_OPERATOR       shift, and go to state 47
    POWER_OPERATOR     shift, and go to state 48
    CONCAT             shift, and go to state 49

    $default  reduce using rule 28 (expr)


State 71

   27 expr: expr • PLUS_OPERATOR expr
   28     | expr • MINUS_OPERATOR expr
   29     | expr • MULTI_OPERATOR expr
   29     | expr MULTI_OPERATOR expr •
   30     | expr • DIVISION_OPERATOR expr
   31     | expr • MOD_OPERATOR expr
   32     | expr • POWER_OPERATOR expr
   33     | expr • CONCAT expr
   34     | expr • EQUAL expr
   35     | expr • NOT_EQUAL expr
   36     | expr • LEQ expr
   37     | expr • GEQ expr
   38     | expr • LESS_THAN expr
   39     | expr • GREATER_THAN expr
   41     | expr • AND expr
   42     | expr • OR expr

    CONCAT  shift, and go to state 49

    $default  reduce using rule 29 (expr)


State 72

   27 expr: expr • PLUS_OPERATOR expr
   28     | expr • MINUS_OPERATOR expr
   29     | expr • MULTI_OPERATOR expr
   30     | expr • DIVISION_OPERATOR expr
   30     | expr DIVISION_OPERATOR expr •
   31     | expr • MOD_OPERATOR expr
   32     | expr • POWER_OPERATOR expr
   33     | expr • CONCAT expr
   34     | expr • EQUAL expr
   35     | expr • NOT_EQUAL expr
   36     | expr • LEQ expr
   37     | expr • GEQ expr
   38     | expr • LESS_THAN expr
   39     | expr • GREATER_THAN expr
   41     | expr • AND expr
   42     | expr • OR expr

    CONCAT  shift, and go to state 49

    $default  reduce using rule 30 (expr)


State 73

   27 expr: expr • PLUS_OPERATOR expr
   28     | expr • MINUS_OPERATOR expr
   29     | expr • MULTI_OPERATOR expr
   30     | expr • DIVISION_OPERATOR expr
   31     | expr • MOD_OPERATOR expr
   31     | expr MOD_OPERATOR expr •
   32     | expr • POWER_OPERATOR expr
   33     | expr • CONCAT expr
   34     | expr • EQUAL expr
   35     | expr • NOT_EQUAL expr
   36     | expr • LEQ expr
   37     | expr • GEQ expr
   38     | expr • LESS_THAN expr
   39     | expr • GREATER_THAN expr
   41     | expr • AND expr
   42     | expr • OR expr

    CONCAT  shift, and go to state 49

    $default  reduce using rule 31 (expr)


State 74

   27 expr: expr • PLUS_OPERATOR expr
   28     | expr • MINUS_OPERATOR expr
   29     | expr • MULTI_OPERATOR expr
   30     | expr • DIVISION_OPERATOR expr
   31     | expr • MOD_OPERATOR expr
   32     | expr • POWER_OPERATOR expr
   32     | expr POWER_OPERATOR expr •
   33     | expr • CONCAT expr
   34     | expr • EQUAL expr
   35     | expr • NOT_EQUAL expr
   36     | expr • LEQ expr
   37     | expr • GEQ expr
   38     | expr • LESS_THAN expr
   39     | expr • GREATER_THAN expr
   41     | expr • AND expr
   42     | expr • OR expr

    CONCAT  shift, and go to state 49

    $default  reduce using rule 32 (expr)


State 75

   27 expr: expr • PLUS_OPERATOR expr
   28     | expr • MINUS_OPERATOR expr
   29     | expr • MULTI_OPERATOR expr
   30     | expr • DIVISION_OPERATOR expr
   31     | expr • MOD_OPERATOR expr
   32     | expr • POWER_OPERATOR expr
   33     | expr • CONCAT expr
   33     | expr CONCAT expr •
   34     | expr • EQUAL expr
   35     | expr • NOT_EQUAL expr
   36     | expr • LEQ expr
   37     | expr • GEQ expr
   38     | expr • LESS_THAN expr
   39     | expr • GREATER_THAN expr
   41     | expr • AND expr
   42     | expr • OR expr

    CONCAT  error (nonassociative)

    $default  reduce using rule 33 (expr)


State 76

    5 stm: TYPE ID ASSIGN expr •
   27 expr: expr • PLUS_OPERATOR expr
   28     | expr • MINUS_OPERATOR expr
   29     | expr • MULTI_OPERATOR expr
   30     | expr • DIVISION_OPERATOR expr
   31     | expr • MOD_OPERATOR expr
   32     | expr • POWER_OPERATOR expr
   33     | expr • CONCAT expr
   34     | expr • EQUAL expr
   35     | expr • NOT_EQUAL expr
   36     | expr • LEQ expr
   37     | expr • GEQ expr
   38     | expr • LESS_THAN expr
   39     | expr • GREATER_THAN expr
   41     | expr • AND expr
   42     | expr • OR expr

    EQUAL              shift, and go to state 35
    NOT_EQUAL          shift, and go to state 36
    LEQ                shift, and go to state 37
    GEQ                shift, and go to state 38
    GREATER_THAN       shift, and go to state 39
    LESS_THAN          shift, and go to state 40
    AND                shift, and go to state 41
    OR                 shift, and go to state 42
    PLUS_OPERATOR      shift, and go to state 43
    MINUS_OPERATOR     shift, and go to state 44
    MULTI_OPERATOR     shift, and go to state 45
    DIVISION_OPERATOR  shift, and go to state 46
    MOD_OPERATOR       shift, and go to state 47
    POWER_OPERATOR     shift, and go to state 48
    CONCAT             shift, and go to state 49

    $default  reduce using rule 5 (stm)


State 77

   21 ids: ID •
   22    | ID • COMMA ids

    COMMA  shift, and go to state 53

    $default  reduce using rule 21 (ids)


State 78

   22 ids: ID COMMA ids •

    $default  reduce using rule 22 (ids)


State 79

    9 stm: DEF ID PARENTHESES_INITIATOR paramlist • PARENTHESES_TERMINATOR BRACES_INITIATOR stmlist BRACES_TERMINATOR
   24 paramlist: paramlist • COMMA param

    COMMA                   shift, and go to state 84
    PARENTHESES_TERMINATOR  shift, and go to state 85


State 80

   10 stm: WHILE expr BRACES_INITIATOR stmlist • BRACES_TERMINATOR

    BRACES_TERMINATOR  shift, and go to state 86


State 81

   11 stm: FOR PARENTHESES_INITIATOR TYPE ID • ITERATOR BRACKETS_INITIATOR VALUE COMMA VALUE BRACKETS_TERMINATOR BRACES_INITIATOR stmlist BRACES_TERMINATOR
   12    | FOR PARENTHESES_INITIATOR TYPE ID • ITERATOR ID BRACES_INITIATOR stmlist BRACES_TERMINATOR

    ITERATOR  shift, and go to state 87


State 82

   13 stm: IF expr BRACES_INITIATOR stmlist • BRACES_TERMINATOR
   14    | IF expr BRACES_INITIATOR stmlist • BRACES_TERMINATOR ELIF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR
   15    | IF expr BRACES_INITIATOR stmlist • BRACES_TERMINATOR ELIF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR ELSE BRACES_INITIATOR stmlist BRACES_TERMINATOR
   16    | IF expr BRACES_INITIATOR stmlist • BRACES_TERMINATOR ELSE stm

    BRACES_TERMINATOR  shift, and go to state 88


State 83

   19 stm: IN PARENTHESES_INITIATOR ID PARENTHESES_TERMINATOR •

    $default  reduce using rule 19 (stm)


State 84

   24 paramlist: paramlist COMMA • param

    TYPE  shift, and go to state 89

    param  go to state 90


State 85

    9 stm: DEF ID PARENTHESES_INITIATOR paramlist PARENTHESES_TERMINATOR • BRACES_INITIATOR stmlist BRACES_TERMINATOR

    BRACES_INITIATOR  shift, and go to state 91


State 86

   10 stm: WHILE expr BRACES_INITIATOR stmlist BRACES_TERMINATOR •

    $default  reduce using rule 10 (stm)


State 87

   11 stm: FOR PARENTHESES_INITIATOR TYPE ID ITERATOR • BRACKETS_INITIATOR VALUE COMMA VALUE BRACKETS_TERMINATOR BRACES_INITIATOR stmlist BRACES_TERMINATOR
   12    | FOR PARENTHESES_INITIATOR TYPE ID ITERATOR • ID BRACES_INITIATOR stmlist BRACES_TERMINATOR

    ID                  shift, and go to state 92
    BRACKETS_INITIATOR  shift, and go to state 93


State 88

   13 stm: IF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR •
   14    | IF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR • ELIF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR
   15    | IF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR • ELIF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR ELSE BRACES_INITIATOR stmlist BRACES_TERMINATOR
   16    | IF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR • ELSE stm

    ELSE  shift, and go to state 94
    ELIF  shift, and go to state 95

    $default  reduce using rule 13 (stm)


State 89

   25 param: TYPE • ID

    ID  shift, and go to state 96


State 90

   24 paramlist: paramlist COMMA param •

    $default  reduce using rule 24 (paramlist)


State 91

    9 stm: DEF ID PARENTHESES_INITIATOR paramlist PARENTHESES_TERMINATOR BRACES_INITIATOR • stmlist BRACES_TERMINATOR

    ID                     shift, and go to state 1
    TYPE                   shift, and go to state 2
    VALUE                  shift, and go to state 3
    DEF                    shift, and go to state 4
    WHILE                  shift, and go to state 5
    FOR                    shift, and go to state 6
    IF                     shift, and go to state 7
    BREAK                  shift, and go to state 8
    RETURN                 shift, and go to state 9
    PARENTHESES_INITIATOR  shift, and go to state 10
    IN                     shift, and go to state 11
    OUT                    shift, and go to state 12
    NOT                    shift, and go to state 13

    stmlist  go to state 97
    stm      go to state 16
    expr     go to state 17
    val      go to state 18


State 92

   12 stm: FOR PARENTHESES_INITIATOR TYPE ID ITERATOR ID • BRACES_INITIATOR stmlist BRACES_TERMINATOR

    BRACES_INITIATOR  shift, and go to state 98


State 93

   11 stm: FOR PARENTHESES_INITIATOR TYPE ID ITERATOR BRACKETS_INITIATOR • VALUE COMMA VALUE BRACKETS_TERMINATOR BRACES_INITIATOR stmlist BRACES_TERMINATOR

    VALUE  shift, and go to state 99


State 94

   16 stm: IF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR ELSE • stm

    ID                     shift, and go to state 1
    TYPE                   shift, and go to state 2
    VALUE                  shift, and go to state 3
    DEF                    shift, and go to state 4
    WHILE                  shift, and go to state 5
    FOR                    shift, and go to state 6
    IF                     shift, and go to state 7
    BREAK                  shift, and go to state 8
    RETURN                 shift, and go to state 9
    PARENTHESES_INITIATOR  shift, and go to state 10
    IN                     shift, and go to state 11
    OUT                    shift, and go to state 12
    NOT                    shift, and go to state 13

    stm   go to state 100
    expr  go to state 17
    val   go to state 18


State 95

   14 stm: IF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR ELIF • expr BRACES_INITIATOR stmlist BRACES_TERMINATOR
   15    | IF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR ELIF • expr BRACES_INITIATOR stmlist BRACES_TERMINATOR ELSE BRACES_INITIATOR stmlist BRACES_TERMINATOR

    ID                     shift, and go to state 24
    VALUE                  shift, and go to state 3
    PARENTHESES_INITIATOR  shift, and go to state 10
    NOT                    shift, and go to state 13

    expr  go to state 101
    val   go to state 18


State 96

   25 param: TYPE ID •

    $default  reduce using rule 25 (param)


State 97

    9 stm: DEF ID PARENTHESES_INITIATOR paramlist PARENTHESES_TERMINATOR BRACES_INITIATOR stmlist • BRACES_TERMINATOR

    BRACES_TERMINATOR  shift, and go to state 102


State 98

   12 stm: FOR PARENTHESES_INITIATOR TYPE ID ITERATOR ID BRACES_INITIATOR • stmlist BRACES_TERMINATOR

    ID                     shift, and go to state 1
    TYPE                   shift, and go to state 2
    VALUE                  shift, and go to state 3
    DEF                    shift, and go to state 4
    WHILE                  shift, and go to state 5
    FOR                    shift, and go to state 6
    IF                     shift, and go to state 7
    BREAK                  shift, and go to state 8
    RETURN                 shift, and go to state 9
    PARENTHESES_INITIATOR  shift, and go to state 10
    IN                     shift, and go to state 11
    OUT                    shift, and go to state 12
    NOT                    shift, and go to state 13

    stmlist  go to state 103
    stm      go to state 16
    expr     go to state 17
    val      go to state 18


State 99

   11 stm: FOR PARENTHESES_INITIATOR TYPE ID ITERATOR BRACKETS_INITIATOR VALUE • COMMA VALUE BRACKETS_TERMINATOR BRACES_INITIATOR stmlist BRACES_TERMINATOR

    COMMA  shift, and go to state 104


State 100

   16 stm: IF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR ELSE stm •

    $default  reduce using rule 16 (stm)


State 101

   14 stm: IF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR ELIF expr • BRACES_INITIATOR stmlist BRACES_TERMINATOR
   15    | IF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR ELIF expr • BRACES_INITIATOR stmlist BRACES_TERMINATOR ELSE BRACES_INITIATOR stmlist BRACES_TERMINATOR
   27 expr: expr • PLUS_OPERATOR expr
   28     | expr • MINUS_OPERATOR expr
   29     | expr • MULTI_OPERATOR expr
   30     | expr • DIVISION_OPERATOR expr
   31     | expr • MOD_OPERATOR expr
   32     | expr • POWER_OPERATOR expr
   33     | expr • CONCAT expr
   34     | expr • EQUAL expr
   35     | expr • NOT_EQUAL expr
   36     | expr • LEQ expr
   37     | expr • GEQ expr
   38     | expr • LESS_THAN expr
   39     | expr • GREATER_THAN expr
   41     | expr • AND expr
   42     | expr • OR expr

    BRACES_INITIATOR   shift, and go to state 105
    EQUAL              shift, and go to state 35
    NOT_EQUAL          shift, and go to state 36
    LEQ                shift, and go to state 37
    GEQ                shift, and go to state 38
    GREATER_THAN       shift, and go to state 39
    LESS_THAN          shift, and go to state 40
    AND                shift, and go to state 41
    OR                 shift, and go to state 42
    PLUS_OPERATOR      shift, and go to state 43
    MINUS_OPERATOR     shift, and go to state 44
    MULTI_OPERATOR     shift, and go to state 45
    DIVISION_OPERATOR  shift, and go to state 46
    MOD_OPERATOR       shift, and go to state 47
    POWER_OPERATOR     shift, and go to state 48
    CONCAT             shift, and go to state 49


State 102

    9 stm: DEF ID PARENTHESES_INITIATOR paramlist PARENTHESES_TERMINATOR BRACES_INITIATOR stmlist BRACES_TERMINATOR •

    $default  reduce using rule 9 (stm)


State 103

   12 stm: FOR PARENTHESES_INITIATOR TYPE ID ITERATOR ID BRACES_INITIATOR stmlist • BRACES_TERMINATOR

    BRACES_TERMINATOR  shift, and go to state 106


State 104

   11 stm: FOR PARENTHESES_INITIATOR TYPE ID ITERATOR BRACKETS_INITIATOR VALUE COMMA • VALUE BRACKETS_TERMINATOR BRACES_INITIATOR stmlist BRACES_TERMINATOR

    VALUE  shift, and go to state 107


State 105

   14 stm: IF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR ELIF expr BRACES_INITIATOR • stmlist BRACES_TERMINATOR
   15    | IF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR ELIF expr BRACES_INITIATOR • stmlist BRACES_TERMINATOR ELSE BRACES_INITIATOR stmlist BRACES_TERMINATOR

    ID                     shift, and go to state 1
    TYPE                   shift, and go to state 2
    VALUE                  shift, and go to state 3
    DEF                    shift, and go to state 4
    WHILE                  shift, and go to state 5
    FOR                    shift, and go to state 6
    IF                     shift, and go to state 7
    BREAK                  shift, and go to state 8
    RETURN                 shift, and go to state 9
    PARENTHESES_INITIATOR  shift, and go to state 10
    IN                     shift, and go to state 11
    OUT                    shift, and go to state 12
    NOT                    shift, and go to state 13

    stmlist  go to state 108
    stm      go to state 16
    expr     go to state 17
    val      go to state 18


State 106

   12 stm: FOR PARENTHESES_INITIATOR TYPE ID ITERATOR ID BRACES_INITIATOR stmlist BRACES_TERMINATOR •

    $default  reduce using rule 12 (stm)


State 107

   11 stm: FOR PARENTHESES_INITIATOR TYPE ID ITERATOR BRACKETS_INITIATOR VALUE COMMA VALUE • BRACKETS_TERMINATOR BRACES_INITIATOR stmlist BRACES_TERMINATOR

    BRACKETS_TERMINATOR  shift, and go to state 109


State 108

   14 stm: IF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR ELIF expr BRACES_INITIATOR stmlist • BRACES_TERMINATOR
   15    | IF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR ELIF expr BRACES_INITIATOR stmlist • BRACES_TERMINATOR ELSE BRACES_INITIATOR stmlist BRACES_TERMINATOR

    BRACES_TERMINATOR  shift, and go to state 110


State 109

   11 stm: FOR PARENTHESES_INITIATOR TYPE ID ITERATOR BRACKETS_INITIATOR VALUE COMMA VALUE BRACKETS_TERMINATOR • BRACES_INITIATOR stmlist BRACES_TERMINATOR

    BRACES_INITIATOR  shift, and go to state 111


State 110

   14 stm: IF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR ELIF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR •
   15    | IF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR ELIF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR • ELSE BRACES_INITIATOR stmlist BRACES_TERMINATOR

    ELSE  shift, and go to state 112

    $default  reduce using rule 14 (stm)


State 111

   11 stm: FOR PARENTHESES_INITIATOR TYPE ID ITERATOR BRACKETS_INITIATOR VALUE COMMA VALUE BRACKETS_TERMINATOR BRACES_INITIATOR • stmlist BRACES_TERMINATOR

    ID                     shift, and go to state 1
    TYPE                   shift, and go to state 2
    VALUE                  shift, and go to state 3
    DEF                    shift, and go to state 4
    WHILE                  shift, and go to state 5
    FOR                    shift, and go to state 6
    IF                     shift, and go to state 7
    BREAK                  shift, and go to state 8
    RETURN                 shift, and go to state 9
    PARENTHESES_INITIATOR  shift, and go to state 10
    IN                     shift, and go to state 11
    OUT                    shift, and go to state 12
    NOT                    shift, and go to state 13

    stmlist  go to state 113
    stm      go to state 16
    expr     go to state 17
    val      go to state 18


State 112

   15 stm: IF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR ELIF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR ELSE • BRACES_INITIATOR stmlist BRACES_TERMINATOR

    BRACES_INITIATOR  shift, and go to state 114


State 113

   11 stm: FOR PARENTHESES_INITIATOR TYPE ID ITERATOR BRACKETS_INITIATOR VALUE COMMA VALUE BRACKETS_TERMINATOR BRACES_INITIATOR stmlist • BRACES_TERMINATOR

    BRACES_TERMINATOR  shift, and go to state 115


State 114

   15 stm: IF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR ELIF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR ELSE BRACES_INITIATOR • stmlist BRACES_TERMINATOR

    ID                     shift, and go to state 1
    TYPE                   shift, and go to state 2
    VALUE                  shift, and go to state 3
    DEF                    shift, and go to state 4
    WHILE                  shift, and go to state 5
    FOR                    shift, and go to state 6
    IF                     shift, and go to state 7
    BREAK                  shift, and go to state 8
    RETURN                 shift, and go to state 9
    PARENTHESES_INITIATOR  shift, and go to state 10
    IN                     shift, and go to state 11
    OUT                    shift, and go to state 12
    NOT                    shift, and go to state 13

    stmlist  go to state 116
    stm      go to state 16
    expr     go to state 17
    val      go to state 18


State 115

   11 stm: FOR PARENTHESES_INITIATOR TYPE ID ITERATOR BRACKETS_INITIATOR VALUE COMMA VALUE BRACKETS_TERMINATOR BRACES_INITIATOR stmlist BRACES_TERMINATOR •

    $default  reduce using rule 11 (stm)


State 116

   15 stm: IF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR ELIF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR ELSE BRACES_INITIATOR stmlist • BRACES_TERMINATOR

    BRACES_TERMINATOR  shift, and go to state 117


State 117

   15 stm: IF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR ELIF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR ELSE BRACES_INITIATOR stmlist BRACES_TERMINATOR •

    $default  reduce using rule 15 (stm)
