Terminals unused in grammar

    LEN_STRING
    COMMENT
    SEPARATOR
    ARRAY
    STRUCT
    TUPLE
    IN
    OUT
    OPEN
    CLOSE


Grammar

    0 $accept: prog $end

    1 prog: stmlist

    2 stmlist: stm SEMICOLON
    3        | stmlist SEMICOLON stm

    4 stm: TYPE ids
    5    | TYPE ID ASSIGN expr
    6    | ID ASSIGN expr
    7    | ID COPY_STRING expr
    8    | DEF ID PARENTHESES_INITIATOR paramlist PARENTHESES_TERMINATOR BRACES_INITIATOR stmlist BRACES_TERMINATOR
    9    | WHILE expr BRACES_INITIATOR stmlist BRACES_TERMINATOR
   10    | FOR PARENTHESES_INITIATOR TYPE ID ITERATOR BRACKETS_INITIATOR VALUE COMMA VALUE BRACKETS_TERMINATOR BRACES_INITIATOR stmlist BRACES_TERMINATOR
   11    | FOR PARENTHESES_INITIATOR TYPE ID ITERATOR ID BRACES_INITIATOR stmlist BRACES_TERMINATOR
   12    | IF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR
   13    | IF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR ELIF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR
   14    | IF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR ELIF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR ELSE BRACES_INITIATOR stmlist BRACES_TERMINATOR
   15    | IF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR ELSE stm
   16    | BREAK
   17    | RETURN expr

   18 ids: ID
   19    | ID COMMA ids

   20 paramlist: %empty
   21          | paramlist COMMA param

   22 param: TYPE ID

   23 expr: val
   24     | expr PLUS_OPERATOR expr
   25     | expr MINUS_OPERATOR expr
   26     | expr MULTI_OPERATOR expr
   27     | expr DIVISION_OPERATOR expr
   28     | expr MOD_OPERATOR expr
   29     | expr POWER_OPERATOR expr
   30     | expr CONCAT expr
   31     | expr EQUAL expr
   32     | expr NOT_EQUAL expr
   33     | expr LEQ expr
   34     | expr GEQ expr
   35     | expr GREATER_THAN expr
   36     | NOT expr
   37     | expr AND expr
   38     | expr OR expr
   39     | PARENTHESES_INITIATOR expr PARENTHESES_TERMINATOR

   40 val: ID
   41    | VALUE


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    ID <sValue> (258) 5 6 7 8 10 11 18 19 22 40
    TYPE <sValue> (259) 4 5 10 11 22
    VALUE <sValue> (260) 10 41
    LEN_STRING <sValue> (261)
    ASSIGN (262) 5 6
    COMMENT (263)
    COMMA (264) 10 19 21
    SEMICOLON (265) 2 3
    SEPARATOR (266)
    DEF (267) 8
    ARRAY (268)
    STRUCT (269)
    TUPLE (270)
    WHILE (271) 9
    FOR (272) 10 11
    ITERATOR (273) 10 11
    IF (274) 12 13 14 15
    ELSE (275) 14 15
    ELIF (276) 13 14
    BREAK (277) 16
    RETURN (278) 17
    BRACES_INITIATOR (279) 8 9 10 11 12 13 14 15
    BRACES_TERMINATOR (280) 8 9 10 11 12 13 14 15
    BRACKETS_INITIATOR (281) 10
    BRACKETS_TERMINATOR (282) 10
    PARENTHESES_INITIATOR (283) 8 10 11 39
    PARENTHESES_TERMINATOR (284) 8 39
    IN (285)
    OUT (286)
    OPEN (287)
    CLOSE (288)
    EQUAL (289) 31
    NOT_EQUAL (290) 32
    LEQ (291) 33
    GEQ (292) 34
    GREATER_THAN (293) 35
    NOT (294) 36
    AND (295) 37
    OR (296) 38
    PLUS_OPERATOR (297) 24
    MINUS_OPERATOR (298) 25
    MULTI_OPERATOR (299) 26
    DIVISION_OPERATOR (300) 27
    MOD_OPERATOR (301) 28
    POWER_OPERATOR (302) 29
    CONCAT (303) 30
    COPY_STRING (304) 7


Nonterminals, with rules where they appear

    $accept (50)
        on left: 0
    prog <sValue> (51)
        on left: 1
        on right: 0
    stmlist <sValue> (52)
        on left: 2 3
        on right: 1 3 8 9 10 11 12 13 14 15
    stm <sValue> (53)
        on left: 4 5 6 7 8 9 10 11 12 13 14 15 16 17
        on right: 2 3 15
    ids (54)
        on left: 18 19
        on right: 4 19
    paramlist (55)
        on left: 20 21
        on right: 8 21
    param (56)
        on left: 22
        on right: 21
    expr (57)
        on left: 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39
        on right: 5 6 7 9 12 13 14 15 17 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39
    val (58)
        on left: 40 41
        on right: 23


State 0

    0 $accept: . prog $end

    ID      shift, and go to state 1
    TYPE    shift, and go to state 2
    DEF     shift, and go to state 3
    WHILE   shift, and go to state 4
    FOR     shift, and go to state 5
    IF      shift, and go to state 6
    BREAK   shift, and go to state 7
    RETURN  shift, and go to state 8

    prog     go to state 9
    stmlist  go to state 10
    stm      go to state 11


State 1

    6 stm: ID . ASSIGN expr
    7    | ID . COPY_STRING expr

    ASSIGN       shift, and go to state 12
    COPY_STRING  shift, and go to state 13


State 2

    4 stm: TYPE . ids
    5    | TYPE . ID ASSIGN expr

    ID  shift, and go to state 14

    ids  go to state 15


State 3

    8 stm: DEF . ID PARENTHESES_INITIATOR paramlist PARENTHESES_TERMINATOR BRACES_INITIATOR stmlist BRACES_TERMINATOR

    ID  shift, and go to state 16


State 4

    9 stm: WHILE . expr BRACES_INITIATOR stmlist BRACES_TERMINATOR

    ID                     shift, and go to state 17
    VALUE                  shift, and go to state 18
    PARENTHESES_INITIATOR  shift, and go to state 19
    NOT                    shift, and go to state 20

    expr  go to state 21
    val   go to state 22


State 5

   10 stm: FOR . PARENTHESES_INITIATOR TYPE ID ITERATOR BRACKETS_INITIATOR VALUE COMMA VALUE BRACKETS_TERMINATOR BRACES_INITIATOR stmlist BRACES_TERMINATOR
   11    | FOR . PARENTHESES_INITIATOR TYPE ID ITERATOR ID BRACES_INITIATOR stmlist BRACES_TERMINATOR

    PARENTHESES_INITIATOR  shift, and go to state 23


State 6

   12 stm: IF . expr BRACES_INITIATOR stmlist BRACES_TERMINATOR
   13    | IF . expr BRACES_INITIATOR stmlist BRACES_TERMINATOR ELIF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR
   14    | IF . expr BRACES_INITIATOR stmlist BRACES_TERMINATOR ELIF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR ELSE BRACES_INITIATOR stmlist BRACES_TERMINATOR
   15    | IF . expr BRACES_INITIATOR stmlist BRACES_TERMINATOR ELSE stm

    ID                     shift, and go to state 17
    VALUE                  shift, and go to state 18
    PARENTHESES_INITIATOR  shift, and go to state 19
    NOT                    shift, and go to state 20

    expr  go to state 24
    val   go to state 22


State 7

   16 stm: BREAK .

    $default  reduce using rule 16 (stm)


State 8

   17 stm: RETURN . expr

    ID                     shift, and go to state 17
    VALUE                  shift, and go to state 18
    PARENTHESES_INITIATOR  shift, and go to state 19
    NOT                    shift, and go to state 20

    expr  go to state 25
    val   go to state 22


State 9

    0 $accept: prog . $end

    $end  shift, and go to state 26


State 10

    1 prog: stmlist .
    3 stmlist: stmlist . SEMICOLON stm

    SEMICOLON  shift, and go to state 27

    $default  reduce using rule 1 (prog)


State 11

    2 stmlist: stm . SEMICOLON

    SEMICOLON  shift, and go to state 28


State 12

    6 stm: ID ASSIGN . expr

    ID                     shift, and go to state 17
    VALUE                  shift, and go to state 18
    PARENTHESES_INITIATOR  shift, and go to state 19
    NOT                    shift, and go to state 20

    expr  go to state 29
    val   go to state 22


State 13

    7 stm: ID COPY_STRING . expr

    ID                     shift, and go to state 17
    VALUE                  shift, and go to state 18
    PARENTHESES_INITIATOR  shift, and go to state 19
    NOT                    shift, and go to state 20

    expr  go to state 30
    val   go to state 22


State 14

    5 stm: TYPE ID . ASSIGN expr
   18 ids: ID .
   19    | ID . COMMA ids

    ASSIGN  shift, and go to state 31
    COMMA   shift, and go to state 32

    $default  reduce using rule 18 (ids)


State 15

    4 stm: TYPE ids .

    $default  reduce using rule 4 (stm)


State 16

    8 stm: DEF ID . PARENTHESES_INITIATOR paramlist PARENTHESES_TERMINATOR BRACES_INITIATOR stmlist BRACES_TERMINATOR

    PARENTHESES_INITIATOR  shift, and go to state 33


State 17

   40 val: ID .

    $default  reduce using rule 40 (val)


State 18

   41 val: VALUE .

    $default  reduce using rule 41 (val)


State 19

   39 expr: PARENTHESES_INITIATOR . expr PARENTHESES_TERMINATOR

    ID                     shift, and go to state 17
    VALUE                  shift, and go to state 18
    PARENTHESES_INITIATOR  shift, and go to state 19
    NOT                    shift, and go to state 20

    expr  go to state 34
    val   go to state 22


State 20

   36 expr: NOT . expr

    ID                     shift, and go to state 17
    VALUE                  shift, and go to state 18
    PARENTHESES_INITIATOR  shift, and go to state 19
    NOT                    shift, and go to state 20

    expr  go to state 35
    val   go to state 22


State 21

    9 stm: WHILE expr . BRACES_INITIATOR stmlist BRACES_TERMINATOR
   24 expr: expr . PLUS_OPERATOR expr
   25     | expr . MINUS_OPERATOR expr
   26     | expr . MULTI_OPERATOR expr
   27     | expr . DIVISION_OPERATOR expr
   28     | expr . MOD_OPERATOR expr
   29     | expr . POWER_OPERATOR expr
   30     | expr . CONCAT expr
   31     | expr . EQUAL expr
   32     | expr . NOT_EQUAL expr
   33     | expr . LEQ expr
   34     | expr . GEQ expr
   35     | expr . GREATER_THAN expr
   37     | expr . AND expr
   38     | expr . OR expr

    BRACES_INITIATOR   shift, and go to state 36
    EQUAL              shift, and go to state 37
    NOT_EQUAL          shift, and go to state 38
    LEQ                shift, and go to state 39
    GEQ                shift, and go to state 40
    GREATER_THAN       shift, and go to state 41
    AND                shift, and go to state 42
    OR                 shift, and go to state 43
    PLUS_OPERATOR      shift, and go to state 44
    MINUS_OPERATOR     shift, and go to state 45
    MULTI_OPERATOR     shift, and go to state 46
    DIVISION_OPERATOR  shift, and go to state 47
    MOD_OPERATOR       shift, and go to state 48
    POWER_OPERATOR     shift, and go to state 49
    CONCAT             shift, and go to state 50


State 22

   23 expr: val .

    $default  reduce using rule 23 (expr)


State 23

   10 stm: FOR PARENTHESES_INITIATOR . TYPE ID ITERATOR BRACKETS_INITIATOR VALUE COMMA VALUE BRACKETS_TERMINATOR BRACES_INITIATOR stmlist BRACES_TERMINATOR
   11    | FOR PARENTHESES_INITIATOR . TYPE ID ITERATOR ID BRACES_INITIATOR stmlist BRACES_TERMINATOR

    TYPE  shift, and go to state 51


State 24

   12 stm: IF expr . BRACES_INITIATOR stmlist BRACES_TERMINATOR
   13    | IF expr . BRACES_INITIATOR stmlist BRACES_TERMINATOR ELIF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR
   14    | IF expr . BRACES_INITIATOR stmlist BRACES_TERMINATOR ELIF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR ELSE BRACES_INITIATOR stmlist BRACES_TERMINATOR
   15    | IF expr . BRACES_INITIATOR stmlist BRACES_TERMINATOR ELSE stm
   24 expr: expr . PLUS_OPERATOR expr
   25     | expr . MINUS_OPERATOR expr
   26     | expr . MULTI_OPERATOR expr
   27     | expr . DIVISION_OPERATOR expr
   28     | expr . MOD_OPERATOR expr
   29     | expr . POWER_OPERATOR expr
   30     | expr . CONCAT expr
   31     | expr . EQUAL expr
   32     | expr . NOT_EQUAL expr
   33     | expr . LEQ expr
   34     | expr . GEQ expr
   35     | expr . GREATER_THAN expr
   37     | expr . AND expr
   38     | expr . OR expr

    BRACES_INITIATOR   shift, and go to state 52
    EQUAL              shift, and go to state 37
    NOT_EQUAL          shift, and go to state 38
    LEQ                shift, and go to state 39
    GEQ                shift, and go to state 40
    GREATER_THAN       shift, and go to state 41
    AND                shift, and go to state 42
    OR                 shift, and go to state 43
    PLUS_OPERATOR      shift, and go to state 44
    MINUS_OPERATOR     shift, and go to state 45
    MULTI_OPERATOR     shift, and go to state 46
    DIVISION_OPERATOR  shift, and go to state 47
    MOD_OPERATOR       shift, and go to state 48
    POWER_OPERATOR     shift, and go to state 49
    CONCAT             shift, and go to state 50


State 25

   17 stm: RETURN expr .
   24 expr: expr . PLUS_OPERATOR expr
   25     | expr . MINUS_OPERATOR expr
   26     | expr . MULTI_OPERATOR expr
   27     | expr . DIVISION_OPERATOR expr
   28     | expr . MOD_OPERATOR expr
   29     | expr . POWER_OPERATOR expr
   30     | expr . CONCAT expr
   31     | expr . EQUAL expr
   32     | expr . NOT_EQUAL expr
   33     | expr . LEQ expr
   34     | expr . GEQ expr
   35     | expr . GREATER_THAN expr
   37     | expr . AND expr
   38     | expr . OR expr

    EQUAL              shift, and go to state 37
    NOT_EQUAL          shift, and go to state 38
    LEQ                shift, and go to state 39
    GEQ                shift, and go to state 40
    GREATER_THAN       shift, and go to state 41
    AND                shift, and go to state 42
    OR                 shift, and go to state 43
    PLUS_OPERATOR      shift, and go to state 44
    MINUS_OPERATOR     shift, and go to state 45
    MULTI_OPERATOR     shift, and go to state 46
    DIVISION_OPERATOR  shift, and go to state 47
    MOD_OPERATOR       shift, and go to state 48
    POWER_OPERATOR     shift, and go to state 49
    CONCAT             shift, and go to state 50

    $default  reduce using rule 17 (stm)


State 26

    0 $accept: prog $end .

    $default  accept


State 27

    3 stmlist: stmlist SEMICOLON . stm

    ID      shift, and go to state 1
    TYPE    shift, and go to state 2
    DEF     shift, and go to state 3
    WHILE   shift, and go to state 4
    FOR     shift, and go to state 5
    IF      shift, and go to state 6
    BREAK   shift, and go to state 7
    RETURN  shift, and go to state 8

    stm  go to state 53


State 28

    2 stmlist: stm SEMICOLON .

    $default  reduce using rule 2 (stmlist)


State 29

    6 stm: ID ASSIGN expr .
   24 expr: expr . PLUS_OPERATOR expr
   25     | expr . MINUS_OPERATOR expr
   26     | expr . MULTI_OPERATOR expr
   27     | expr . DIVISION_OPERATOR expr
   28     | expr . MOD_OPERATOR expr
   29     | expr . POWER_OPERATOR expr
   30     | expr . CONCAT expr
   31     | expr . EQUAL expr
   32     | expr . NOT_EQUAL expr
   33     | expr . LEQ expr
   34     | expr . GEQ expr
   35     | expr . GREATER_THAN expr
   37     | expr . AND expr
   38     | expr . OR expr

    EQUAL              shift, and go to state 37
    NOT_EQUAL          shift, and go to state 38
    LEQ                shift, and go to state 39
    GEQ                shift, and go to state 40
    GREATER_THAN       shift, and go to state 41
    AND                shift, and go to state 42
    OR                 shift, and go to state 43
    PLUS_OPERATOR      shift, and go to state 44
    MINUS_OPERATOR     shift, and go to state 45
    MULTI_OPERATOR     shift, and go to state 46
    DIVISION_OPERATOR  shift, and go to state 47
    MOD_OPERATOR       shift, and go to state 48
    POWER_OPERATOR     shift, and go to state 49
    CONCAT             shift, and go to state 50

    $default  reduce using rule 6 (stm)


State 30

    7 stm: ID COPY_STRING expr .
   24 expr: expr . PLUS_OPERATOR expr
   25     | expr . MINUS_OPERATOR expr
   26     | expr . MULTI_OPERATOR expr
   27     | expr . DIVISION_OPERATOR expr
   28     | expr . MOD_OPERATOR expr
   29     | expr . POWER_OPERATOR expr
   30     | expr . CONCAT expr
   31     | expr . EQUAL expr
   32     | expr . NOT_EQUAL expr
   33     | expr . LEQ expr
   34     | expr . GEQ expr
   35     | expr . GREATER_THAN expr
   37     | expr . AND expr
   38     | expr . OR expr

    EQUAL              shift, and go to state 37
    NOT_EQUAL          shift, and go to state 38
    LEQ                shift, and go to state 39
    GEQ                shift, and go to state 40
    GREATER_THAN       shift, and go to state 41
    AND                shift, and go to state 42
    OR                 shift, and go to state 43
    PLUS_OPERATOR      shift, and go to state 44
    MINUS_OPERATOR     shift, and go to state 45
    MULTI_OPERATOR     shift, and go to state 46
    DIVISION_OPERATOR  shift, and go to state 47
    MOD_OPERATOR       shift, and go to state 48
    POWER_OPERATOR     shift, and go to state 49
    CONCAT             shift, and go to state 50

    $default  reduce using rule 7 (stm)


State 31

    5 stm: TYPE ID ASSIGN . expr

    ID                     shift, and go to state 17
    VALUE                  shift, and go to state 18
    PARENTHESES_INITIATOR  shift, and go to state 19
    NOT                    shift, and go to state 20

    expr  go to state 54
    val   go to state 22


State 32

   19 ids: ID COMMA . ids

    ID  shift, and go to state 55

    ids  go to state 56


State 33

    8 stm: DEF ID PARENTHESES_INITIATOR . paramlist PARENTHESES_TERMINATOR BRACES_INITIATOR stmlist BRACES_TERMINATOR

    $default  reduce using rule 20 (paramlist)

    paramlist  go to state 57


State 34

   24 expr: expr . PLUS_OPERATOR expr
   25     | expr . MINUS_OPERATOR expr
   26     | expr . MULTI_OPERATOR expr
   27     | expr . DIVISION_OPERATOR expr
   28     | expr . MOD_OPERATOR expr
   29     | expr . POWER_OPERATOR expr
   30     | expr . CONCAT expr
   31     | expr . EQUAL expr
   32     | expr . NOT_EQUAL expr
   33     | expr . LEQ expr
   34     | expr . GEQ expr
   35     | expr . GREATER_THAN expr
   37     | expr . AND expr
   38     | expr . OR expr
   39     | PARENTHESES_INITIATOR expr . PARENTHESES_TERMINATOR

    PARENTHESES_TERMINATOR  shift, and go to state 58
    EQUAL                   shift, and go to state 37
    NOT_EQUAL               shift, and go to state 38
    LEQ                     shift, and go to state 39
    GEQ                     shift, and go to state 40
    GREATER_THAN            shift, and go to state 41
    AND                     shift, and go to state 42
    OR                      shift, and go to state 43
    PLUS_OPERATOR           shift, and go to state 44
    MINUS_OPERATOR          shift, and go to state 45
    MULTI_OPERATOR          shift, and go to state 46
    DIVISION_OPERATOR       shift, and go to state 47
    MOD_OPERATOR            shift, and go to state 48
    POWER_OPERATOR          shift, and go to state 49
    CONCAT                  shift, and go to state 50


State 35

   24 expr: expr . PLUS_OPERATOR expr
   25     | expr . MINUS_OPERATOR expr
   26     | expr . MULTI_OPERATOR expr
   27     | expr . DIVISION_OPERATOR expr
   28     | expr . MOD_OPERATOR expr
   29     | expr . POWER_OPERATOR expr
   30     | expr . CONCAT expr
   31     | expr . EQUAL expr
   32     | expr . NOT_EQUAL expr
   33     | expr . LEQ expr
   34     | expr . GEQ expr
   35     | expr . GREATER_THAN expr
   36     | NOT expr .
   37     | expr . AND expr
   38     | expr . OR expr

    EQUAL              shift, and go to state 37
    NOT_EQUAL          shift, and go to state 38
    LEQ                shift, and go to state 39
    GEQ                shift, and go to state 40
    GREATER_THAN       shift, and go to state 41
    PLUS_OPERATOR      shift, and go to state 44
    MINUS_OPERATOR     shift, and go to state 45
    MULTI_OPERATOR     shift, and go to state 46
    DIVISION_OPERATOR  shift, and go to state 47
    MOD_OPERATOR       shift, and go to state 48
    POWER_OPERATOR     shift, and go to state 49
    CONCAT             shift, and go to state 50

    $default  reduce using rule 36 (expr)


State 36

    9 stm: WHILE expr BRACES_INITIATOR . stmlist BRACES_TERMINATOR

    ID      shift, and go to state 1
    TYPE    shift, and go to state 2
    DEF     shift, and go to state 3
    WHILE   shift, and go to state 4
    FOR     shift, and go to state 5
    IF      shift, and go to state 6
    BREAK   shift, and go to state 7
    RETURN  shift, and go to state 8

    stmlist  go to state 59
    stm      go to state 11


State 37

   31 expr: expr EQUAL . expr

    ID                     shift, and go to state 17
    VALUE                  shift, and go to state 18
    PARENTHESES_INITIATOR  shift, and go to state 19
    NOT                    shift, and go to state 20

    expr  go to state 60
    val   go to state 22


State 38

   32 expr: expr NOT_EQUAL . expr

    ID                     shift, and go to state 17
    VALUE                  shift, and go to state 18
    PARENTHESES_INITIATOR  shift, and go to state 19
    NOT                    shift, and go to state 20

    expr  go to state 61
    val   go to state 22


State 39

   33 expr: expr LEQ . expr

    ID                     shift, and go to state 17
    VALUE                  shift, and go to state 18
    PARENTHESES_INITIATOR  shift, and go to state 19
    NOT                    shift, and go to state 20

    expr  go to state 62
    val   go to state 22


State 40

   34 expr: expr GEQ . expr

    ID                     shift, and go to state 17
    VALUE                  shift, and go to state 18
    PARENTHESES_INITIATOR  shift, and go to state 19
    NOT                    shift, and go to state 20

    expr  go to state 63
    val   go to state 22


State 41

   35 expr: expr GREATER_THAN . expr

    ID                     shift, and go to state 17
    VALUE                  shift, and go to state 18
    PARENTHESES_INITIATOR  shift, and go to state 19
    NOT                    shift, and go to state 20

    expr  go to state 64
    val   go to state 22


State 42

   37 expr: expr AND . expr

    ID                     shift, and go to state 17
    VALUE                  shift, and go to state 18
    PARENTHESES_INITIATOR  shift, and go to state 19
    NOT                    shift, and go to state 20

    expr  go to state 65
    val   go to state 22


State 43

   38 expr: expr OR . expr

    ID                     shift, and go to state 17
    VALUE                  shift, and go to state 18
    PARENTHESES_INITIATOR  shift, and go to state 19
    NOT                    shift, and go to state 20

    expr  go to state 66
    val   go to state 22


State 44

   24 expr: expr PLUS_OPERATOR . expr

    ID                     shift, and go to state 17
    VALUE                  shift, and go to state 18
    PARENTHESES_INITIATOR  shift, and go to state 19
    NOT                    shift, and go to state 20

    expr  go to state 67
    val   go to state 22


State 45

   25 expr: expr MINUS_OPERATOR . expr

    ID                     shift, and go to state 17
    VALUE                  shift, and go to state 18
    PARENTHESES_INITIATOR  shift, and go to state 19
    NOT                    shift, and go to state 20

    expr  go to state 68
    val   go to state 22


State 46

   26 expr: expr MULTI_OPERATOR . expr

    ID                     shift, and go to state 17
    VALUE                  shift, and go to state 18
    PARENTHESES_INITIATOR  shift, and go to state 19
    NOT                    shift, and go to state 20

    expr  go to state 69
    val   go to state 22


State 47

   27 expr: expr DIVISION_OPERATOR . expr

    ID                     shift, and go to state 17
    VALUE                  shift, and go to state 18
    PARENTHESES_INITIATOR  shift, and go to state 19
    NOT                    shift, and go to state 20

    expr  go to state 70
    val   go to state 22


State 48

   28 expr: expr MOD_OPERATOR . expr

    ID                     shift, and go to state 17
    VALUE                  shift, and go to state 18
    PARENTHESES_INITIATOR  shift, and go to state 19
    NOT                    shift, and go to state 20

    expr  go to state 71
    val   go to state 22


State 49

   29 expr: expr POWER_OPERATOR . expr

    ID                     shift, and go to state 17
    VALUE                  shift, and go to state 18
    PARENTHESES_INITIATOR  shift, and go to state 19
    NOT                    shift, and go to state 20

    expr  go to state 72
    val   go to state 22


State 50

   30 expr: expr CONCAT . expr

    ID                     shift, and go to state 17
    VALUE                  shift, and go to state 18
    PARENTHESES_INITIATOR  shift, and go to state 19
    NOT                    shift, and go to state 20

    expr  go to state 73
    val   go to state 22


State 51

   10 stm: FOR PARENTHESES_INITIATOR TYPE . ID ITERATOR BRACKETS_INITIATOR VALUE COMMA VALUE BRACKETS_TERMINATOR BRACES_INITIATOR stmlist BRACES_TERMINATOR
   11    | FOR PARENTHESES_INITIATOR TYPE . ID ITERATOR ID BRACES_INITIATOR stmlist BRACES_TERMINATOR

    ID  shift, and go to state 74


State 52

   12 stm: IF expr BRACES_INITIATOR . stmlist BRACES_TERMINATOR
   13    | IF expr BRACES_INITIATOR . stmlist BRACES_TERMINATOR ELIF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR
   14    | IF expr BRACES_INITIATOR . stmlist BRACES_TERMINATOR ELIF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR ELSE BRACES_INITIATOR stmlist BRACES_TERMINATOR
   15    | IF expr BRACES_INITIATOR . stmlist BRACES_TERMINATOR ELSE stm

    ID      shift, and go to state 1
    TYPE    shift, and go to state 2
    DEF     shift, and go to state 3
    WHILE   shift, and go to state 4
    FOR     shift, and go to state 5
    IF      shift, and go to state 6
    BREAK   shift, and go to state 7
    RETURN  shift, and go to state 8

    stmlist  go to state 75
    stm      go to state 11


State 53

    3 stmlist: stmlist SEMICOLON stm .

    $default  reduce using rule 3 (stmlist)


State 54

    5 stm: TYPE ID ASSIGN expr .
   24 expr: expr . PLUS_OPERATOR expr
   25     | expr . MINUS_OPERATOR expr
   26     | expr . MULTI_OPERATOR expr
   27     | expr . DIVISION_OPERATOR expr
   28     | expr . MOD_OPERATOR expr
   29     | expr . POWER_OPERATOR expr
   30     | expr . CONCAT expr
   31     | expr . EQUAL expr
   32     | expr . NOT_EQUAL expr
   33     | expr . LEQ expr
   34     | expr . GEQ expr
   35     | expr . GREATER_THAN expr
   37     | expr . AND expr
   38     | expr . OR expr

    EQUAL              shift, and go to state 37
    NOT_EQUAL          shift, and go to state 38
    LEQ                shift, and go to state 39
    GEQ                shift, and go to state 40
    GREATER_THAN       shift, and go to state 41
    AND                shift, and go to state 42
    OR                 shift, and go to state 43
    PLUS_OPERATOR      shift, and go to state 44
    MINUS_OPERATOR     shift, and go to state 45
    MULTI_OPERATOR     shift, and go to state 46
    DIVISION_OPERATOR  shift, and go to state 47
    MOD_OPERATOR       shift, and go to state 48
    POWER_OPERATOR     shift, and go to state 49
    CONCAT             shift, and go to state 50

    $default  reduce using rule 5 (stm)


State 55

   18 ids: ID .
   19    | ID . COMMA ids

    COMMA  shift, and go to state 32

    $default  reduce using rule 18 (ids)


State 56

   19 ids: ID COMMA ids .

    $default  reduce using rule 19 (ids)


State 57

    8 stm: DEF ID PARENTHESES_INITIATOR paramlist . PARENTHESES_TERMINATOR BRACES_INITIATOR stmlist BRACES_TERMINATOR
   21 paramlist: paramlist . COMMA param

    COMMA                   shift, and go to state 76
    PARENTHESES_TERMINATOR  shift, and go to state 77


State 58

   39 expr: PARENTHESES_INITIATOR expr PARENTHESES_TERMINATOR .

    $default  reduce using rule 39 (expr)


State 59

    3 stmlist: stmlist . SEMICOLON stm
    9 stm: WHILE expr BRACES_INITIATOR stmlist . BRACES_TERMINATOR

    SEMICOLON          shift, and go to state 27
    BRACES_TERMINATOR  shift, and go to state 78


State 60

   24 expr: expr . PLUS_OPERATOR expr
   25     | expr . MINUS_OPERATOR expr
   26     | expr . MULTI_OPERATOR expr
   27     | expr . DIVISION_OPERATOR expr
   28     | expr . MOD_OPERATOR expr
   29     | expr . POWER_OPERATOR expr
   30     | expr . CONCAT expr
   31     | expr . EQUAL expr
   31     | expr EQUAL expr .
   32     | expr . NOT_EQUAL expr
   33     | expr . LEQ expr
   34     | expr . GEQ expr
   35     | expr . GREATER_THAN expr
   37     | expr . AND expr
   38     | expr . OR expr

    PLUS_OPERATOR      shift, and go to state 44
    MINUS_OPERATOR     shift, and go to state 45
    MULTI_OPERATOR     shift, and go to state 46
    DIVISION_OPERATOR  shift, and go to state 47
    MOD_OPERATOR       shift, and go to state 48
    POWER_OPERATOR     shift, and go to state 49
    CONCAT             shift, and go to state 50

    EQUAL         error (nonassociative)
    NOT_EQUAL     error (nonassociative)
    LEQ           error (nonassociative)
    GEQ           error (nonassociative)
    GREATER_THAN  error (nonassociative)

    $default  reduce using rule 31 (expr)


State 61

   24 expr: expr . PLUS_OPERATOR expr
   25     | expr . MINUS_OPERATOR expr
   26     | expr . MULTI_OPERATOR expr
   27     | expr . DIVISION_OPERATOR expr
   28     | expr . MOD_OPERATOR expr
   29     | expr . POWER_OPERATOR expr
   30     | expr . CONCAT expr
   31     | expr . EQUAL expr
   32     | expr . NOT_EQUAL expr
   32     | expr NOT_EQUAL expr .
   33     | expr . LEQ expr
   34     | expr . GEQ expr
   35     | expr . GREATER_THAN expr
   37     | expr . AND expr
   38     | expr . OR expr

    PLUS_OPERATOR      shift, and go to state 44
    MINUS_OPERATOR     shift, and go to state 45
    MULTI_OPERATOR     shift, and go to state 46
    DIVISION_OPERATOR  shift, and go to state 47
    MOD_OPERATOR       shift, and go to state 48
    POWER_OPERATOR     shift, and go to state 49
    CONCAT             shift, and go to state 50

    EQUAL         error (nonassociative)
    NOT_EQUAL     error (nonassociative)
    LEQ           error (nonassociative)
    GEQ           error (nonassociative)
    GREATER_THAN  error (nonassociative)

    $default  reduce using rule 32 (expr)


State 62

   24 expr: expr . PLUS_OPERATOR expr
   25     | expr . MINUS_OPERATOR expr
   26     | expr . MULTI_OPERATOR expr
   27     | expr . DIVISION_OPERATOR expr
   28     | expr . MOD_OPERATOR expr
   29     | expr . POWER_OPERATOR expr
   30     | expr . CONCAT expr
   31     | expr . EQUAL expr
   32     | expr . NOT_EQUAL expr
   33     | expr . LEQ expr
   33     | expr LEQ expr .
   34     | expr . GEQ expr
   35     | expr . GREATER_THAN expr
   37     | expr . AND expr
   38     | expr . OR expr

    PLUS_OPERATOR      shift, and go to state 44
    MINUS_OPERATOR     shift, and go to state 45
    MULTI_OPERATOR     shift, and go to state 46
    DIVISION_OPERATOR  shift, and go to state 47
    MOD_OPERATOR       shift, and go to state 48
    POWER_OPERATOR     shift, and go to state 49
    CONCAT             shift, and go to state 50

    EQUAL         error (nonassociative)
    NOT_EQUAL     error (nonassociative)
    LEQ           error (nonassociative)
    GEQ           error (nonassociative)
    GREATER_THAN  error (nonassociative)

    $default  reduce using rule 33 (expr)


State 63

   24 expr: expr . PLUS_OPERATOR expr
   25     | expr . MINUS_OPERATOR expr
   26     | expr . MULTI_OPERATOR expr
   27     | expr . DIVISION_OPERATOR expr
   28     | expr . MOD_OPERATOR expr
   29     | expr . POWER_OPERATOR expr
   30     | expr . CONCAT expr
   31     | expr . EQUAL expr
   32     | expr . NOT_EQUAL expr
   33     | expr . LEQ expr
   34     | expr . GEQ expr
   34     | expr GEQ expr .
   35     | expr . GREATER_THAN expr
   37     | expr . AND expr
   38     | expr . OR expr

    PLUS_OPERATOR      shift, and go to state 44
    MINUS_OPERATOR     shift, and go to state 45
    MULTI_OPERATOR     shift, and go to state 46
    DIVISION_OPERATOR  shift, and go to state 47
    MOD_OPERATOR       shift, and go to state 48
    POWER_OPERATOR     shift, and go to state 49
    CONCAT             shift, and go to state 50

    EQUAL         error (nonassociative)
    NOT_EQUAL     error (nonassociative)
    LEQ           error (nonassociative)
    GEQ           error (nonassociative)
    GREATER_THAN  error (nonassociative)

    $default  reduce using rule 34 (expr)


State 64

   24 expr: expr . PLUS_OPERATOR expr
   25     | expr . MINUS_OPERATOR expr
   26     | expr . MULTI_OPERATOR expr
   27     | expr . DIVISION_OPERATOR expr
   28     | expr . MOD_OPERATOR expr
   29     | expr . POWER_OPERATOR expr
   30     | expr . CONCAT expr
   31     | expr . EQUAL expr
   32     | expr . NOT_EQUAL expr
   33     | expr . LEQ expr
   34     | expr . GEQ expr
   35     | expr . GREATER_THAN expr
   35     | expr GREATER_THAN expr .
   37     | expr . AND expr
   38     | expr . OR expr

    PLUS_OPERATOR      shift, and go to state 44
    MINUS_OPERATOR     shift, and go to state 45
    MULTI_OPERATOR     shift, and go to state 46
    DIVISION_OPERATOR  shift, and go to state 47
    MOD_OPERATOR       shift, and go to state 48
    POWER_OPERATOR     shift, and go to state 49
    CONCAT             shift, and go to state 50

    EQUAL         error (nonassociative)
    NOT_EQUAL     error (nonassociative)
    LEQ           error (nonassociative)
    GEQ           error (nonassociative)
    GREATER_THAN  error (nonassociative)

    $default  reduce using rule 35 (expr)


State 65

   24 expr: expr . PLUS_OPERATOR expr
   25     | expr . MINUS_OPERATOR expr
   26     | expr . MULTI_OPERATOR expr
   27     | expr . DIVISION_OPERATOR expr
   28     | expr . MOD_OPERATOR expr
   29     | expr . POWER_OPERATOR expr
   30     | expr . CONCAT expr
   31     | expr . EQUAL expr
   32     | expr . NOT_EQUAL expr
   33     | expr . LEQ expr
   34     | expr . GEQ expr
   35     | expr . GREATER_THAN expr
   37     | expr . AND expr
   37     | expr AND expr .
   38     | expr . OR expr

    EQUAL              shift, and go to state 37
    NOT_EQUAL          shift, and go to state 38
    LEQ                shift, and go to state 39
    GEQ                shift, and go to state 40
    GREATER_THAN       shift, and go to state 41
    PLUS_OPERATOR      shift, and go to state 44
    MINUS_OPERATOR     shift, and go to state 45
    MULTI_OPERATOR     shift, and go to state 46
    DIVISION_OPERATOR  shift, and go to state 47
    MOD_OPERATOR       shift, and go to state 48
    POWER_OPERATOR     shift, and go to state 49
    CONCAT             shift, and go to state 50

    $default  reduce using rule 37 (expr)


State 66

   24 expr: expr . PLUS_OPERATOR expr
   25     | expr . MINUS_OPERATOR expr
   26     | expr . MULTI_OPERATOR expr
   27     | expr . DIVISION_OPERATOR expr
   28     | expr . MOD_OPERATOR expr
   29     | expr . POWER_OPERATOR expr
   30     | expr . CONCAT expr
   31     | expr . EQUAL expr
   32     | expr . NOT_EQUAL expr
   33     | expr . LEQ expr
   34     | expr . GEQ expr
   35     | expr . GREATER_THAN expr
   37     | expr . AND expr
   38     | expr . OR expr
   38     | expr OR expr .

    EQUAL              shift, and go to state 37
    NOT_EQUAL          shift, and go to state 38
    LEQ                shift, and go to state 39
    GEQ                shift, and go to state 40
    GREATER_THAN       shift, and go to state 41
    AND                shift, and go to state 42
    PLUS_OPERATOR      shift, and go to state 44
    MINUS_OPERATOR     shift, and go to state 45
    MULTI_OPERATOR     shift, and go to state 46
    DIVISION_OPERATOR  shift, and go to state 47
    MOD_OPERATOR       shift, and go to state 48
    POWER_OPERATOR     shift, and go to state 49
    CONCAT             shift, and go to state 50

    $default  reduce using rule 38 (expr)


State 67

   24 expr: expr . PLUS_OPERATOR expr
   24     | expr PLUS_OPERATOR expr .
   25     | expr . MINUS_OPERATOR expr
   26     | expr . MULTI_OPERATOR expr
   27     | expr . DIVISION_OPERATOR expr
   28     | expr . MOD_OPERATOR expr
   29     | expr . POWER_OPERATOR expr
   30     | expr . CONCAT expr
   31     | expr . EQUAL expr
   32     | expr . NOT_EQUAL expr
   33     | expr . LEQ expr
   34     | expr . GEQ expr
   35     | expr . GREATER_THAN expr
   37     | expr . AND expr
   38     | expr . OR expr

    MULTI_OPERATOR     shift, and go to state 46
    DIVISION_OPERATOR  shift, and go to state 47
    MOD_OPERATOR       shift, and go to state 48
    POWER_OPERATOR     shift, and go to state 49
    CONCAT             shift, and go to state 50

    $default  reduce using rule 24 (expr)


State 68

   24 expr: expr . PLUS_OPERATOR expr
   25     | expr . MINUS_OPERATOR expr
   25     | expr MINUS_OPERATOR expr .
   26     | expr . MULTI_OPERATOR expr
   27     | expr . DIVISION_OPERATOR expr
   28     | expr . MOD_OPERATOR expr
   29     | expr . POWER_OPERATOR expr
   30     | expr . CONCAT expr
   31     | expr . EQUAL expr
   32     | expr . NOT_EQUAL expr
   33     | expr . LEQ expr
   34     | expr . GEQ expr
   35     | expr . GREATER_THAN expr
   37     | expr . AND expr
   38     | expr . OR expr

    MULTI_OPERATOR     shift, and go to state 46
    DIVISION_OPERATOR  shift, and go to state 47
    MOD_OPERATOR       shift, and go to state 48
    POWER_OPERATOR     shift, and go to state 49
    CONCAT             shift, and go to state 50

    $default  reduce using rule 25 (expr)


State 69

   24 expr: expr . PLUS_OPERATOR expr
   25     | expr . MINUS_OPERATOR expr
   26     | expr . MULTI_OPERATOR expr
   26     | expr MULTI_OPERATOR expr .
   27     | expr . DIVISION_OPERATOR expr
   28     | expr . MOD_OPERATOR expr
   29     | expr . POWER_OPERATOR expr
   30     | expr . CONCAT expr
   31     | expr . EQUAL expr
   32     | expr . NOT_EQUAL expr
   33     | expr . LEQ expr
   34     | expr . GEQ expr
   35     | expr . GREATER_THAN expr
   37     | expr . AND expr
   38     | expr . OR expr

    CONCAT  shift, and go to state 50

    $default  reduce using rule 26 (expr)


State 70

   24 expr: expr . PLUS_OPERATOR expr
   25     | expr . MINUS_OPERATOR expr
   26     | expr . MULTI_OPERATOR expr
   27     | expr . DIVISION_OPERATOR expr
   27     | expr DIVISION_OPERATOR expr .
   28     | expr . MOD_OPERATOR expr
   29     | expr . POWER_OPERATOR expr
   30     | expr . CONCAT expr
   31     | expr . EQUAL expr
   32     | expr . NOT_EQUAL expr
   33     | expr . LEQ expr
   34     | expr . GEQ expr
   35     | expr . GREATER_THAN expr
   37     | expr . AND expr
   38     | expr . OR expr

    CONCAT  shift, and go to state 50

    $default  reduce using rule 27 (expr)


State 71

   24 expr: expr . PLUS_OPERATOR expr
   25     | expr . MINUS_OPERATOR expr
   26     | expr . MULTI_OPERATOR expr
   27     | expr . DIVISION_OPERATOR expr
   28     | expr . MOD_OPERATOR expr
   28     | expr MOD_OPERATOR expr .
   29     | expr . POWER_OPERATOR expr
   30     | expr . CONCAT expr
   31     | expr . EQUAL expr
   32     | expr . NOT_EQUAL expr
   33     | expr . LEQ expr
   34     | expr . GEQ expr
   35     | expr . GREATER_THAN expr
   37     | expr . AND expr
   38     | expr . OR expr

    CONCAT  shift, and go to state 50

    $default  reduce using rule 28 (expr)


State 72

   24 expr: expr . PLUS_OPERATOR expr
   25     | expr . MINUS_OPERATOR expr
   26     | expr . MULTI_OPERATOR expr
   27     | expr . DIVISION_OPERATOR expr
   28     | expr . MOD_OPERATOR expr
   29     | expr . POWER_OPERATOR expr
   29     | expr POWER_OPERATOR expr .
   30     | expr . CONCAT expr
   31     | expr . EQUAL expr
   32     | expr . NOT_EQUAL expr
   33     | expr . LEQ expr
   34     | expr . GEQ expr
   35     | expr . GREATER_THAN expr
   37     | expr . AND expr
   38     | expr . OR expr

    CONCAT  shift, and go to state 50

    $default  reduce using rule 29 (expr)


State 73

   24 expr: expr . PLUS_OPERATOR expr
   25     | expr . MINUS_OPERATOR expr
   26     | expr . MULTI_OPERATOR expr
   27     | expr . DIVISION_OPERATOR expr
   28     | expr . MOD_OPERATOR expr
   29     | expr . POWER_OPERATOR expr
   30     | expr . CONCAT expr
   30     | expr CONCAT expr .
   31     | expr . EQUAL expr
   32     | expr . NOT_EQUAL expr
   33     | expr . LEQ expr
   34     | expr . GEQ expr
   35     | expr . GREATER_THAN expr
   37     | expr . AND expr
   38     | expr . OR expr

    CONCAT  error (nonassociative)

    $default  reduce using rule 30 (expr)


State 74

   10 stm: FOR PARENTHESES_INITIATOR TYPE ID . ITERATOR BRACKETS_INITIATOR VALUE COMMA VALUE BRACKETS_TERMINATOR BRACES_INITIATOR stmlist BRACES_TERMINATOR
   11    | FOR PARENTHESES_INITIATOR TYPE ID . ITERATOR ID BRACES_INITIATOR stmlist BRACES_TERMINATOR

    ITERATOR  shift, and go to state 79


State 75

    3 stmlist: stmlist . SEMICOLON stm
   12 stm: IF expr BRACES_INITIATOR stmlist . BRACES_TERMINATOR
   13    | IF expr BRACES_INITIATOR stmlist . BRACES_TERMINATOR ELIF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR
   14    | IF expr BRACES_INITIATOR stmlist . BRACES_TERMINATOR ELIF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR ELSE BRACES_INITIATOR stmlist BRACES_TERMINATOR
   15    | IF expr BRACES_INITIATOR stmlist . BRACES_TERMINATOR ELSE stm

    SEMICOLON          shift, and go to state 27
    BRACES_TERMINATOR  shift, and go to state 80


State 76

   21 paramlist: paramlist COMMA . param

    TYPE  shift, and go to state 81

    param  go to state 82


State 77

    8 stm: DEF ID PARENTHESES_INITIATOR paramlist PARENTHESES_TERMINATOR . BRACES_INITIATOR stmlist BRACES_TERMINATOR

    BRACES_INITIATOR  shift, and go to state 83


State 78

    9 stm: WHILE expr BRACES_INITIATOR stmlist BRACES_TERMINATOR .

    $default  reduce using rule 9 (stm)


State 79

   10 stm: FOR PARENTHESES_INITIATOR TYPE ID ITERATOR . BRACKETS_INITIATOR VALUE COMMA VALUE BRACKETS_TERMINATOR BRACES_INITIATOR stmlist BRACES_TERMINATOR
   11    | FOR PARENTHESES_INITIATOR TYPE ID ITERATOR . ID BRACES_INITIATOR stmlist BRACES_TERMINATOR

    ID                  shift, and go to state 84
    BRACKETS_INITIATOR  shift, and go to state 85


State 80

   12 stm: IF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR .
   13    | IF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR . ELIF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR
   14    | IF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR . ELIF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR ELSE BRACES_INITIATOR stmlist BRACES_TERMINATOR
   15    | IF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR . ELSE stm

    ELSE  shift, and go to state 86
    ELIF  shift, and go to state 87

    $default  reduce using rule 12 (stm)


State 81

   22 param: TYPE . ID

    ID  shift, and go to state 88


State 82

   21 paramlist: paramlist COMMA param .

    $default  reduce using rule 21 (paramlist)


State 83

    8 stm: DEF ID PARENTHESES_INITIATOR paramlist PARENTHESES_TERMINATOR BRACES_INITIATOR . stmlist BRACES_TERMINATOR

    ID      shift, and go to state 1
    TYPE    shift, and go to state 2
    DEF     shift, and go to state 3
    WHILE   shift, and go to state 4
    FOR     shift, and go to state 5
    IF      shift, and go to state 6
    BREAK   shift, and go to state 7
    RETURN  shift, and go to state 8

    stmlist  go to state 89
    stm      go to state 11


State 84

   11 stm: FOR PARENTHESES_INITIATOR TYPE ID ITERATOR ID . BRACES_INITIATOR stmlist BRACES_TERMINATOR

    BRACES_INITIATOR  shift, and go to state 90


State 85

   10 stm: FOR PARENTHESES_INITIATOR TYPE ID ITERATOR BRACKETS_INITIATOR . VALUE COMMA VALUE BRACKETS_TERMINATOR BRACES_INITIATOR stmlist BRACES_TERMINATOR

    VALUE  shift, and go to state 91


State 86

   15 stm: IF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR ELSE . stm

    ID      shift, and go to state 1
    TYPE    shift, and go to state 2
    DEF     shift, and go to state 3
    WHILE   shift, and go to state 4
    FOR     shift, and go to state 5
    IF      shift, and go to state 6
    BREAK   shift, and go to state 7
    RETURN  shift, and go to state 8

    stm  go to state 92


State 87

   13 stm: IF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR ELIF . expr BRACES_INITIATOR stmlist BRACES_TERMINATOR
   14    | IF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR ELIF . expr BRACES_INITIATOR stmlist BRACES_TERMINATOR ELSE BRACES_INITIATOR stmlist BRACES_TERMINATOR

    ID                     shift, and go to state 17
    VALUE                  shift, and go to state 18
    PARENTHESES_INITIATOR  shift, and go to state 19
    NOT                    shift, and go to state 20

    expr  go to state 93
    val   go to state 22


State 88

   22 param: TYPE ID .

    $default  reduce using rule 22 (param)


State 89

    3 stmlist: stmlist . SEMICOLON stm
    8 stm: DEF ID PARENTHESES_INITIATOR paramlist PARENTHESES_TERMINATOR BRACES_INITIATOR stmlist . BRACES_TERMINATOR

    SEMICOLON          shift, and go to state 27
    BRACES_TERMINATOR  shift, and go to state 94


State 90

   11 stm: FOR PARENTHESES_INITIATOR TYPE ID ITERATOR ID BRACES_INITIATOR . stmlist BRACES_TERMINATOR

    ID      shift, and go to state 1
    TYPE    shift, and go to state 2
    DEF     shift, and go to state 3
    WHILE   shift, and go to state 4
    FOR     shift, and go to state 5
    IF      shift, and go to state 6
    BREAK   shift, and go to state 7
    RETURN  shift, and go to state 8

    stmlist  go to state 95
    stm      go to state 11


State 91

   10 stm: FOR PARENTHESES_INITIATOR TYPE ID ITERATOR BRACKETS_INITIATOR VALUE . COMMA VALUE BRACKETS_TERMINATOR BRACES_INITIATOR stmlist BRACES_TERMINATOR

    COMMA  shift, and go to state 96


State 92

   15 stm: IF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR ELSE stm .

    $default  reduce using rule 15 (stm)


State 93

   13 stm: IF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR ELIF expr . BRACES_INITIATOR stmlist BRACES_TERMINATOR
   14    | IF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR ELIF expr . BRACES_INITIATOR stmlist BRACES_TERMINATOR ELSE BRACES_INITIATOR stmlist BRACES_TERMINATOR
   24 expr: expr . PLUS_OPERATOR expr
   25     | expr . MINUS_OPERATOR expr
   26     | expr . MULTI_OPERATOR expr
   27     | expr . DIVISION_OPERATOR expr
   28     | expr . MOD_OPERATOR expr
   29     | expr . POWER_OPERATOR expr
   30     | expr . CONCAT expr
   31     | expr . EQUAL expr
   32     | expr . NOT_EQUAL expr
   33     | expr . LEQ expr
   34     | expr . GEQ expr
   35     | expr . GREATER_THAN expr
   37     | expr . AND expr
   38     | expr . OR expr

    BRACES_INITIATOR   shift, and go to state 97
    EQUAL              shift, and go to state 37
    NOT_EQUAL          shift, and go to state 38
    LEQ                shift, and go to state 39
    GEQ                shift, and go to state 40
    GREATER_THAN       shift, and go to state 41
    AND                shift, and go to state 42
    OR                 shift, and go to state 43
    PLUS_OPERATOR      shift, and go to state 44
    MINUS_OPERATOR     shift, and go to state 45
    MULTI_OPERATOR     shift, and go to state 46
    DIVISION_OPERATOR  shift, and go to state 47
    MOD_OPERATOR       shift, and go to state 48
    POWER_OPERATOR     shift, and go to state 49
    CONCAT             shift, and go to state 50


State 94

    8 stm: DEF ID PARENTHESES_INITIATOR paramlist PARENTHESES_TERMINATOR BRACES_INITIATOR stmlist BRACES_TERMINATOR .

    $default  reduce using rule 8 (stm)


State 95

    3 stmlist: stmlist . SEMICOLON stm
   11 stm: FOR PARENTHESES_INITIATOR TYPE ID ITERATOR ID BRACES_INITIATOR stmlist . BRACES_TERMINATOR

    SEMICOLON          shift, and go to state 27
    BRACES_TERMINATOR  shift, and go to state 98


State 96

   10 stm: FOR PARENTHESES_INITIATOR TYPE ID ITERATOR BRACKETS_INITIATOR VALUE COMMA . VALUE BRACKETS_TERMINATOR BRACES_INITIATOR stmlist BRACES_TERMINATOR

    VALUE  shift, and go to state 99


State 97

   13 stm: IF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR ELIF expr BRACES_INITIATOR . stmlist BRACES_TERMINATOR
   14    | IF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR ELIF expr BRACES_INITIATOR . stmlist BRACES_TERMINATOR ELSE BRACES_INITIATOR stmlist BRACES_TERMINATOR

    ID      shift, and go to state 1
    TYPE    shift, and go to state 2
    DEF     shift, and go to state 3
    WHILE   shift, and go to state 4
    FOR     shift, and go to state 5
    IF      shift, and go to state 6
    BREAK   shift, and go to state 7
    RETURN  shift, and go to state 8

    stmlist  go to state 100
    stm      go to state 11


State 98

   11 stm: FOR PARENTHESES_INITIATOR TYPE ID ITERATOR ID BRACES_INITIATOR stmlist BRACES_TERMINATOR .

    $default  reduce using rule 11 (stm)


State 99

   10 stm: FOR PARENTHESES_INITIATOR TYPE ID ITERATOR BRACKETS_INITIATOR VALUE COMMA VALUE . BRACKETS_TERMINATOR BRACES_INITIATOR stmlist BRACES_TERMINATOR

    BRACKETS_TERMINATOR  shift, and go to state 101


State 100

    3 stmlist: stmlist . SEMICOLON stm
   13 stm: IF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR ELIF expr BRACES_INITIATOR stmlist . BRACES_TERMINATOR
   14    | IF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR ELIF expr BRACES_INITIATOR stmlist . BRACES_TERMINATOR ELSE BRACES_INITIATOR stmlist BRACES_TERMINATOR

    SEMICOLON          shift, and go to state 27
    BRACES_TERMINATOR  shift, and go to state 102


State 101

   10 stm: FOR PARENTHESES_INITIATOR TYPE ID ITERATOR BRACKETS_INITIATOR VALUE COMMA VALUE BRACKETS_TERMINATOR . BRACES_INITIATOR stmlist BRACES_TERMINATOR

    BRACES_INITIATOR  shift, and go to state 103


State 102

   13 stm: IF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR ELIF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR .
   14    | IF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR ELIF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR . ELSE BRACES_INITIATOR stmlist BRACES_TERMINATOR

    ELSE  shift, and go to state 104

    $default  reduce using rule 13 (stm)


State 103

   10 stm: FOR PARENTHESES_INITIATOR TYPE ID ITERATOR BRACKETS_INITIATOR VALUE COMMA VALUE BRACKETS_TERMINATOR BRACES_INITIATOR . stmlist BRACES_TERMINATOR

    ID      shift, and go to state 1
    TYPE    shift, and go to state 2
    DEF     shift, and go to state 3
    WHILE   shift, and go to state 4
    FOR     shift, and go to state 5
    IF      shift, and go to state 6
    BREAK   shift, and go to state 7
    RETURN  shift, and go to state 8

    stmlist  go to state 105
    stm      go to state 11


State 104

   14 stm: IF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR ELIF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR ELSE . BRACES_INITIATOR stmlist BRACES_TERMINATOR

    BRACES_INITIATOR  shift, and go to state 106


State 105

    3 stmlist: stmlist . SEMICOLON stm
   10 stm: FOR PARENTHESES_INITIATOR TYPE ID ITERATOR BRACKETS_INITIATOR VALUE COMMA VALUE BRACKETS_TERMINATOR BRACES_INITIATOR stmlist . BRACES_TERMINATOR

    SEMICOLON          shift, and go to state 27
    BRACES_TERMINATOR  shift, and go to state 107


State 106

   14 stm: IF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR ELIF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR ELSE BRACES_INITIATOR . stmlist BRACES_TERMINATOR

    ID      shift, and go to state 1
    TYPE    shift, and go to state 2
    DEF     shift, and go to state 3
    WHILE   shift, and go to state 4
    FOR     shift, and go to state 5
    IF      shift, and go to state 6
    BREAK   shift, and go to state 7
    RETURN  shift, and go to state 8

    stmlist  go to state 108
    stm      go to state 11


State 107

   10 stm: FOR PARENTHESES_INITIATOR TYPE ID ITERATOR BRACKETS_INITIATOR VALUE COMMA VALUE BRACKETS_TERMINATOR BRACES_INITIATOR stmlist BRACES_TERMINATOR .

    $default  reduce using rule 10 (stm)


State 108

    3 stmlist: stmlist . SEMICOLON stm
   14 stm: IF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR ELIF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR ELSE BRACES_INITIATOR stmlist . BRACES_TERMINATOR

    SEMICOLON          shift, and go to state 27
    BRACES_TERMINATOR  shift, and go to state 109


State 109

   14 stm: IF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR ELIF expr BRACES_INITIATOR stmlist BRACES_TERMINATOR ELSE BRACES_INITIATOR stmlist BRACES_TERMINATOR .

    $default  reduce using rule 14 (stm)
